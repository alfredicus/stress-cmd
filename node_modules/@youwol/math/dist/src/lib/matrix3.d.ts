import { vec } from './vectors';
export declare namespace mat {
    /**
     * @category Matrix
     */
    type Matrix3 = [vec.Vector3, vec.Vector3, vec.Vector3];
    /**
     * Unpack a linearized matrix (components in a vector) and return
     * a double array matrix
     * @example
     * ```ts
     * // sym matrix3
     * const m = [1, 2, 3,
     *               4, 5,
     *                  6]
     * const n = unpack(m)
     * // will give
     * // [
     * //   [1, 2, 3],
     * //   [2, 4, 5],
     * //   [3, 5, 6]
     * // ]
     * ```
     */
    function unpack(m: vec.Vector6 | vec.Vector9): Matrix3;
    /**
     * Pack a a double array matrix, i.e. return
     * components in a vector
     * @see [[unpack]]
     */
    function pack(m: Matrix3, isSym?: boolean): vec.Vector6 | vec.Vector9;
    /**
     * @category Matrix
     */
    function det(m: Matrix3): number;
    function multMat(m1: Matrix3, m2: Matrix3): Matrix3;
    function multVec(e: Matrix3, v: vec.Vector3): vec.Vector3;
    function multTVec(e: Matrix3, v: vec.Vector3): vec.Vector3;
    /**
     * @category Matrix
     */
    function inv(me: Matrix3, throwOnDegenerate: boolean): any;
    /**
     * @category Matrix
     */
    function transpose(m: Matrix3): Matrix3;
    function transposeSelf(m: Matrix3): any;
    /**
     * @brief Rotate CCW (angle in degrees) along the provided axis.
     * @param m The matrix
     * @param angleInDeg The angle of rotation
     * @param AXIS The axis of rotation/ Can be either `x`, `X`, `y`, `Y`, `z`, or `Z`.
     * @category Matrix
     */
    function rotate(m: Matrix3, angleInDeg: number, AXIS: string): Matrix3;
    /**
     * Rotate inverse a [[Matrix3]] according to a rotation matrix
     * @param {Matrix3} R The rotation matrix (antisymmetric)
     * @param {Matrix3} M The matrix3 to rotate
     */
    function rotateInverse(M: Matrix3, R: Matrix3): Matrix3;
    /**
     * Rotate forward a [[Matrix3]] according to a rotation matrix
     * @param {Matrix3} R The rotation matrix (antisymmetric)
     * @param {Matrix3} M The matrix3 to rotate
     */
    function rotateForward(M: Matrix3, R: Matrix3): Matrix3;
    function makeRotationX(theta: number): Matrix3;
    function makeRotationY(theta: number): Matrix3;
    function makeRotationZ(theta: number): Matrix3;
}
