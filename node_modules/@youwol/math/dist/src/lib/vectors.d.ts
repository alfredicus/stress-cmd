export declare namespace vec {
    interface IVector {
        [i: number]: number;
        reduce(cb: (acc: number, cur: number, index?: number) => number, init: number): number;
        map(cb: (v: number, index: number) => number): IVector;
        forEach(cb: (v: number, index: number) => void): void;
        [Symbol.iterator](): any;
        readonly length: number;
    }
    /**
     * @category Vector
     */
    type Vector2 = [number, number];
    /**
     * @category Vector
     */
    type Vector3 = [number, number, number];
    /**
     * @category Vector
     */
    type Vector4 = [number, number, number, number];
    /**
     * @category Vector
     */
    type Vector6 = [number, number, number, number, number, number];
    /**
     * @category Vector
     */
    type Vector9 = [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
    ];
    /**
     * @category Vector
     */
    const create: (v1: IVector, v2: IVector) => IVector;
    /**
     * @category Vector
     */
    const norm2: (v: IVector) => number;
    /**
     * @category Vector
     */
    const norm: (v: IVector) => number;
    /**
     * Perform (a+b)
     * @category Vector
     */
    const add: (a: IVector, b: IVector) => IVector;
    /**
     * Perform (a-b)
     * @category Vector
     */
    const sub: (a: IVector, b: IVector) => IVector;
    /**
     * @category Vector
     */
    const scale: (v: IVector, s: number) => IVector;
    /**
     * @category Vector
     */
    const setCoord: (v: IVector, i: number, value: number) => number;
    /**
     * @category Vector
     */
    const set: (v: IVector, v1: IVector) => void;
    /**
     * @category Vector
     */
    const dot: (a: IVector, b: IVector) => number;
    /**
     * @category Vector
     */
    const cross: (v: Vector3, w: Vector3) => Vector3;
    /**
     * @category Vector
     */
    const normalize: (v: IVector) => IVector;
    const clone: (v: IVector) => IVector;
}
