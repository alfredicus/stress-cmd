{"version":3,"file":"@youwol/math.js","mappings":"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","sources":["webpack://@youwol/math/webpack/universalModuleDefinition","webpack://@youwol/math/external umd \"@youwol/dataframe\"","webpack://@youwol/math/webpack/bootstrap","webpack://@youwol/math/webpack/runtime/define property getters","webpack://@youwol/math/webpack/runtime/hasOwnProperty shorthand","webpack://@youwol/math/webpack/runtime/make namespace object","webpack://@youwol/math/./lib/dataframe/eigen.ts","webpack://@youwol/math/./lib/dataframe/add.ts","webpack://@youwol/math/./lib/dataframe/sub.ts","webpack://@youwol/math/./lib/dataframe/mult.ts","webpack://@youwol/math/./lib/dataframe/multMat.ts","webpack://@youwol/math/./lib/dataframe/div.ts","webpack://@youwol/math/./lib/dataframe/trace.ts","webpack://@youwol/math/./lib/dataframe/norm.ts","webpack://@youwol/math/./lib/dataframe/transpose.ts","webpack://@youwol/math/./lib/dataframe/square.ts","webpack://@youwol/math/./lib/dataframe/abs.ts","webpack://@youwol/math/./lib/dataframe/dot.ts","webpack://@youwol/math/./lib/dataframe/cross.ts","webpack://@youwol/math/./lib/dataframe/normalize.ts","webpack://@youwol/math/./lib/dataframe/unitInterval.ts","webpack://@youwol/math/./lib/dataframe/negate.ts","webpack://@youwol/math/./lib/dataframe/invert.ts","webpack://@youwol/math/./lib/dataframe/weightedSum.ts","webpack://@youwol/math/./lib/dataframe/sum.ts","webpack://@youwol/math/./lib/dataframe/tagNaN.ts","webpack://@youwol/math/./lib/dataframe/rand.ts","webpack://@youwol/math/./lib/dataframe/round.ts","webpack://@youwol/math/./lib/dataframe/trunc.ts","webpack://@youwol/math/./lib/dataframe/minMax.ts","webpack://@youwol/math/./lib/dataframe/equals.ts","webpack://@youwol/math/./lib/dataframe/closeTo.ts","webpack://@youwol/math/./lib/dataframe/getNaN.ts","webpack://@youwol/math/./lib/dataframe/inv.ts","webpack://@youwol/math/./lib/dataframe/rotate.ts","webpack://@youwol/math/./lib/dataframe/translate.ts","webpack://@youwol/math/./lib/dataframe/scale.ts","webpack://@youwol/math/./lib/dataframe/shuffle.ts","webpack://@youwol/math/./lib/dataframe/determinant.ts","webpack://@youwol/math/./lib/dataframe/switchConvention.ts","webpack://@youwol/math/./lib/dataframe/normals.ts","webpack://@youwol/math/./lib/dataframe/areas.ts","webpack://@youwol/math/./lib/dataframe/barycenters.ts","webpack://@youwol/math/./lib/dataframe/stats/mean.ts","webpack://@youwol/math/./lib/dataframe/stats/covariance.ts","webpack://@youwol/math/./lib/dataframe/stats/variance.ts","webpack://@youwol/math/./lib/dataframe/stats/weightedMean.ts","webpack://@youwol/math/./lib/dataframe/stats/quantile.ts","webpack://@youwol/math/./lib/dataframe/stats/std.ts","webpack://@youwol/math/./lib/dataframe/stats/describe.ts","webpack://@youwol/math/./lib/dataframe/stats/bins.ts","webpack://@youwol/math/./lib/dataframe/decomposers/component.ts","webpack://@youwol/math/./lib/dataframe/decomposers/position.ts","webpack://@youwol/math/./lib/dataframe/decomposers/eigen.ts","webpack://@youwol/math/./lib/dataframe/decomposers/norm.ts","webpack://@youwol/math/./lib/dataframe/decomposers/normals.ts","webpack://@youwol/math/./lib/dataframe/decomposers/valence.ts","webpack://@youwol/math/./lib/dataframe/decomposers/area.ts","webpack://@youwol/math/./lib/dataframe/decomposers/fringes.ts","webpack://@youwol/math/./lib/eigen.ts","webpack://@youwol/math/./lib/barycentric.ts","webpack://@youwol/math/./lib/arrays.ts","webpack://@youwol/math/./lib/interpolations.ts","webpack://@youwol/math/./lib/vectors.ts","webpack://@youwol/math/./lib/minMax.ts","webpack://@youwol/math/./lib/quaternion.ts","webpack://@youwol/math/./lib/rotateAxis.ts","webpack://@youwol/math/./lib/matrix3.ts","webpack://@youwol/math/./lib/random.ts","webpack://@youwol/math/./lib/movingAverage.ts","webpack://@youwol/math/./lib/inverseCDF.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@youwol/dataframe\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@youwol/math\", [\"@youwol/dataframe\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@youwol/math\"] = factory(require(\"@youwol/dataframe\"));\n\telse\n\t\troot[\"@youwol/math\"] = factory(root[\"@youwol/dataframe\"]);\n})((typeof self !== 'undefined' ? self : this), (__WEBPACK_EXTERNAL_MODULE__595__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__595__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Serie } from '@youwol/dataframe'\nimport { eigen } from '../'\n\n/**\n * Get eigen values\n * @category Dataframe\n */\nexport const eigenValue = (s: Serie) => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    const dim = s.dimension\n    if (s.dimension === 2 && (s.itemSize === 3 || s.itemSize === 4)) {\n        /* everything's fine */\n    } else if (s.dimension === 3 && (s.itemSize === 6 || s.itemSize === 9)) {\n        /* everything's fine */\n    } else {\n        throw new Error(\n            `Series does not have itemSize = 3, 4, 6 or 9 ([xx,xy,yy], [xx,xy,xz,yy,yz,zz], [xx, xy, yx, yy] or [xx,xy,xz,yx,yy,yz,zx,zy,zz]). Got ${s.itemSize}`,\n        )\n    }\n\n    const r = s.image(s.count, dim)\n    const count = s.count\n    let k = 0\n\n    for (let i = 0; i < count; ++i) {\n        const a = s.itemAt(i) as number[]\n        const e = eigen(a)\n        for (let j = 0; j < dim; ++j) {\n            r.array[k++] = e.values[j]\n        }\n    }\n\n    return r\n}\n\n/**\n * Get eigen vectors. itemSize of the returned Serie is therefore 9 and the coordinates of the\n * three eigen vectors are classified as follow: `[v1x,v1y,v1z, v2x,v2y,v2z, v3x, v3y, v3z]`\n * @category Dataframe\n */\nexport const eigenVector = (s: Serie) => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    const dim = s.dimension\n    if (s.dimension === 2 && (s.itemSize === 3 || s.itemSize === 4)) {\n        /* everything's fine */\n    } else if (s.dimension === 3 && (s.itemSize === 6 || s.itemSize === 9)) {\n        /* everything's fine */\n    } else {\n        throw new Error(\n            `Series does not have itemSize = 3, 4, 6 or 9 ([xx,xy,yy], [xx,xy,xz,yy,yz,zz], [xx, xy, yx, yy] or [xx,xy,xz,yx,yy,yz,zx,zy,zz]). Got ${s.itemSize}`,\n        )\n    }\n\n    // if (s.itemSize !== 6 && s.itemSize!==9) {\n    //     throw new Error(`Series does not have itemSize = 6 or 9 (symmetric tensor [xx,xy,xz,yy,yz,zz] or [xx,xy,xz,yx,yy,yz,zx,zy,zz]). Got ${s.itemSize}`)\n    // }\n\n    const r = s.image(s.count, dim ** 2)\n    const count = s.count\n    let k = 0\n\n    for (let i = 0; i < count; ++i) {\n        const a = s.itemAt(i) as number[]\n        const e = eigen(a)\n        e.vectors.forEach((v) => (r.array[k++] = v))\n    }\n\n    return r\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * Add several Series to generate a new one\n * @example\n * ```ts\n * // perform: a = b + c\n * const a = add([\n *     df.get('b'),\n *     df.get('c'),\n * ])\n * ```\n * @example\n * ```ts\n * // perform: a = 0.1*b + 0.3*c + 0.7*d\n * const a = add([\n *     mult( df.get('b'), 0.1),\n *     mult( df.get('c'), 0.3),\n *     mult( df.get('d'), 0.7)\n * ])\n * ```\n * @category Dataframe\n */\nexport const add = (series: Serie[]) => {\n    if (series.length <= 1) {\n        throw new Error('nb series should be greater than 1')\n    }\n\n    const r = series[0].clone(true)\n\n    series.forEach((o) => {\n        if (o.length !== r.length) {\n            throw new Error(\n                `size mistmatch. Cannot add 2 Series of different sizes (${o.length} != ${r.length})`,\n            )\n        }\n        o.array.forEach((v, i) => (r.array[i] += v))\n    })\n\n    return r\n}\n\n/**\n * Add a number to each value of the array\n * @example\n * ```ts\n * const a = addNumber( df.get('a'), 10 )\n * ```\n * @category Dataframe\n */\nexport const addNumber = (serie: Serie, a: number) => {\n    const r = serie.clone(false)\n    if (a === 0) {\n        return r\n    }\n\n    r.array.forEach((v, i) => (r.array[i] += a))\n    return r\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * Subtract several Series to generate a new one\n * @example\n * ```ts\n * // perform: a = b - c\n * const a = sub(\n *     df.get('b'),\n *     df.get('c'),\n * )\n * ```\n * @category Dataframe\n */\nexport const sub = (s: Serie, ...others: (Serie | number)[]) => {\n    if (s === undefined) {\n        throw new Error('serie s is undefined')\n    }\n    if (!others) {\n        throw new Error('cannot subtract undefined to s')\n    }\n\n    const r = s.clone()\n\n    // rest\n    if (others) {\n        others.forEach((o) => {\n            if (typeof o === 'number') {\n                r.array.forEach((_, i) => (r.array[i] -= o))\n            } else {\n                if (o.length !== s.length) {\n                    throw new Error(\n                        `size mistmatch. Cannot add 2 Series of different sizes (${o.length} != ${s.length})`,\n                    )\n                }\n                o.array.forEach((v, i) => (r.array[i] -= v))\n            }\n        })\n    }\n\n    return r\n}\n","import { Serie } from '@youwol/dataframe'\n\n// See https://stackoverflow.com/questions/54328275/math-js-is-slow-to-multiply-2-big-matrices ?\n// See https://github.com/josdejong/mathjs\n// See https://github.com/R-js/blasjs\n// See https://github.com/gpujs/gpu.js/\n// See https://stdlib.io/docs/api/v0.0.90/\n\n/*\n * @example\n * Perform: `w = M * v, where M are symmetric matrices (size 3x3) and v vectors (size 3)`\n * ```ts\n * let df = new DataFrame()\n *      .set('M', createSerie(new Array(20).fill(2), 6))\n *      .set('v', createSerie(new Array(20).fill(3), 3))\n *\n * const w = mult( df.get('M'), df.get('v') )\n * ```\n * @example\n * Perform: `M = M1 * M2, where M1 and M2 are non-symmetric matrices of size 9 (3x3)`\n * ```ts\n * let df = new DataFrame()\n *      .set('M1', createSerie(new Array(20).fill(2), 9))\n *      .set('M2', createSerie(new Array(20).fill(3), 9))\n *\n * const M = mult( df.get('M1'), df.get('M2') )\n * ```\n */\n\n/**\n * Multiply series between them, item component  by item component.\n * Do not confuse with [[multMat]]\n * @see [[multMat]]\n * @example\n * Perform: `a = b * c` where b, c and d are vectors of size 3\n * ```ts\n * let df = DataFrame.create({\n *      series: {\n *          b: createSerie(new Array(20).fill(2), 3)),\n *          c: createSerie(new Array(20).fill(3), 3))\n *      }\n * })\n *\n * const a = mult( df.series['b'], df.series['c'] )\n * ```\n * @example\n * Perform: `a = 0.1*b + 0.3*c + 0.7*d`\n * ```ts\n * let df = DataFrame.create({\n *      series: {\n *          b: createSerie(new Array(20).fill(2), 3)),\n *          c: createSerie(new Array(20).fill(3), 3)),\n *          c: createSerie(new Array(20).fill(4), 3))\n *      }\n * })\n *\n * const a = add(\n *     mult( df.series['b'], 0.1),\n *     mult( df.series['c'], 0.3),\n *     mult( df.series['d'], 0.7)\n * )\n * ```\n * @category Dataframe\n */\nexport const mult = (s: Serie, ...args: (Serie | number)[]) => {\n    if (s === undefined) {\n        return undefined\n    }\n    if (!args) {\n        throw new Error('cannot multiply undefined to s')\n    }\n\n    const r = s.clone()\n\n    args.forEach((o) => {\n        if (typeof o === 'number') {\n            r.array.forEach((_, i) => (r.array[i] *= o))\n        } else {\n            if (o.length !== s.length) {\n                throw new Error(\n                    `size mistmatch. Cannot multiply 2 Series of different sizes (${o.length} != ${s.length})`,\n                )\n            }\n            o.array.forEach((v, i) => (r.array[i] *= v))\n        }\n    })\n\n    return r\n}\n","import {\n    Serie,\n    squaredMatrix,\n    symSquaredMatrix,\n    Vector,\n} from '@youwol/dataframe'\nimport { mult } from './mult'\n\n// NOTE\n// Implicitly, any itemSize=3 is a vector\n// If itemSize>3 (6 or 9), it is a matrix\n\n/**\n * Perform either:\n * 1. `Vec*number` (scale)\n * 2. `Vec*Vec` (dot)\n * 3. `Mat*number` (scale)\n * 4. `Mat*Vec`\n * 5. `Mat*Mat`\n * @example\n * Perform A.B.AT\n * ```ts\n * const A = Serie.create({array: new Array(27).fill(2), itemSize: 9})\n * const B = Serie.create({array: new Array(18).fill(3), itemSize: 6})\n * const a = multMat(A, multMat(B, transpose(A)))\n * ```\n * @category Dataframe\n */\nexport const multMat = (s1: Serie, s2: Serie | number): Serie => {\n    if (s1 === undefined) {\n        throw new Error('s1 is undefined')\n    }\n    if (s2 === undefined) {\n        throw new Error('s2 is undefined')\n    }\n\n    if (typeof s2 === 'number') {\n        // const s = s2\n        return mult(s1, s2) //s1.map( v => v*s)\n    }\n    if (s2.itemSize === 1) {\n        return s1.map((v, i) => v * (s2.itemAt(i) as number))\n    }\n\n    if (s1.itemSize === 1) {\n        if (s2.itemSize !== 1) {\n            throw new Error('s2 should have itemSize=1 (same as s1)')\n        }\n        return s1.map((v, i) => v * (s2.itemAt(i) as number))\n    }\n\n    if (s1.itemSize === 3) {\n        if (s2.itemSize === 3) {\n            return s1.map((v, i) => {\n                const w = s2.itemAt(i)\n                return v[0] * w[0] + v[1] * w[1] + v[2] * w[2] // dot\n            })\n        }\n        throw new Error(\n            'since s1 has itemSize=3, s2 should have itemSize=1 or 3',\n        )\n    }\n\n    if (s1.itemSize === 6 || s1.itemSize === 9) {\n        if (s2.itemSize === 3) {\n            return s1.map((v, i) => {\n                const A =\n                    s1.itemSize === 6 ? symSquaredMatrix(v) : squaredMatrix(v)\n                const b = new Vector(s2.itemAt(i) as number[])\n                return A.multVec(b).array\n            })\n        }\n        if (s2.itemSize === 6 || s2.itemSize === 9) {\n            return s1.map((v, i) => {\n                const A =\n                    s1.itemSize === 6 ? symSquaredMatrix(v) : squaredMatrix(v)\n                const b =\n                    s2.itemSize === 6\n                        ? symSquaredMatrix(s2.itemAt(i) as number[])\n                        : squaredMatrix(s2.itemAt(i) as number[])\n                return A.multMat(b).array\n            })\n        }\n    }\n\n    throw new Error('Cannot multMat')\n}\n\n/*\n\n1) A non sym\n-----------------\nA = [1 2 3 4 5 6 7 8 9]\n\nB = [1 2 3]\nA*B' = [14 32 50]\n\nB = [9 8 7 6 5 4]\nA*B = [46 35 29 118 92 77 190 149 125]\n\nB = [9 8 7 6 5 4 3 2 1]\nA*B = [30 24 18 84 69 54 138 114 90]\n\n2) A sym\n-----------------\nA = [9 8 7 6 5 4]\n\nB = [1 2 3]\nA*B' = [46 35 29]\n\nB = [1 2 3 4 5 6]\nA*B = [46    85   109   35    65    84   29    54    70]\n\nB = [1 2 3 4 5 6 7 8 9]\nA*B = [90   114   138   67    86   105   55    71    87]\n*/\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @example\n * ```ts\n * // perform a = b/c/d\n * const a = div( df.get('b'), df.get('c'), df.get('d') )\n * ```\n * @category Dataframe\n */\nexport const div = (s: Serie, ...others: (Serie | number)[]) => {\n    if (s === undefined) {\n        return undefined\n    }\n    if (!others) {\n        throw new Error('cannot divide undefined to s')\n    }\n\n    const r = s.clone()\n\n    // rest\n    if (others) {\n        others.forEach((o) => {\n            if (typeof o === 'number') {\n                r.array.forEach((_, i) => (r.array[i] /= o))\n            } else {\n                if (o.length !== s.length) {\n                    throw new Error(\n                        `size mistmatch. Cannot divide 2 Series of different sizes (${o.length} != ${s.length})`,\n                    )\n                }\n                o.array.forEach((v, i) => (r.array[i] /= v))\n            }\n        })\n    }\n\n    return r\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * Get the trace of symmetric matrices of size:\n * <ul>\n *   <li> 6: [xx, xy, xz, yy, yz, zz]\n *   <li> 9: [xx, xy, xz, yx, yy, yz, zx, zy, zz]\n * </ul>\n * @category Dataframe\n */\nexport function trace(s: Serie) {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n    if (\n        s.itemSize !== 1 &&\n        s.itemSize !== 3 &&\n        s.itemSize !== 4 &&\n        s.itemSize !== 6 &&\n        s.itemSize !== 9\n    ) {\n        throw new Error('item size should be 1, 3, 4, 6 or 9')\n    }\n\n    if (s.itemSize === 1) {\n        return s.clone()\n    }\n\n    const itemSize = s.itemSize\n    const r = s.image(s.count, 1)\n    for (let i = 0; i < s.count; ++i) {\n        const a = s.itemAt(i) as number[]\n        if (itemSize === 3) {\n            r.array[i] = a[0] + a[2]\n        } else if (itemSize === 4) {\n            r.array[i] = a[0] + a[3]\n        } else if (itemSize === 6) {\n            r.array[i] = a[0] + a[3] + a[5]\n        } else {\n            r.array[i] = a[0] + a[4] + a[8]\n        }\n    }\n    return r\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe\n */\nexport const norm = (s: Serie) => {\n    return norm2(s).map((v) => Math.sqrt(v))\n}\n\n/**\n * @category Dataframe\n */\nexport const norm2 = (s: Serie) => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    const r = s.image(s.count, 1)\n\n    if (s.itemSize === 1) {\n        return r\n    }\n\n    for (let i = 0; i < s.count; ++i) {\n        const v = s.itemAt(i) as number[]\n        r.array[i] = v.reduce((acc, v) => acc + v ** 2, 0)\n    }\n\n    return r\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * Only transpose matrix in the form of arrays of size 9\n * @category Dataframe\n */\nexport const transpose = (s: Serie) => {\n    if (s === undefined) {\n        return undefined\n    }\n    if (s.itemSize !== 9) {\n        throw new Error('items size should be 9 only (for now)')\n    }\n\n    const r = s.clone()\n    const a = r.array\n\n    let id = 0\n    s.forEach((item) => {\n        a[id++] = item[0]\n        a[id++] = item[3]\n        a[id++] = item[6]\n        a[id++] = item[1]\n        a[id++] = item[4]\n        a[id++] = item[7]\n        a[id++] = item[2]\n        a[id++] = item[5]\n        a[id++] = item[8]\n    })\n\n    return r\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe\n */\nexport const square = (s: Serie) => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    return Serie.create({\n        array: s.array.map((v) => v ** 2),\n        itemSize: s.itemSize,\n        dimension: s.dimension,\n    })\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe\n */\nexport const abs = (s: Serie): Serie => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    return Serie.create({\n        array: s.array.map((v) => Math.abs(v)),\n        itemSize: s.itemSize,\n        dimension: s.dimension,\n    })\n}\n","import { vector, Serie, map } from '@youwol/dataframe'\nimport { vec } from '../vectors'\n\n/**\n * @category Dataframe\n */\nexport const dot = (a: Serie, b: Serie | vec.IVector) => {\n    if (a === undefined) {\n        throw new Error('serie a is undefined')\n    }\n    if (b === undefined) {\n        throw new Error('serie or Vector b is undefined')\n    }\n\n    if (Serie.isSerie(b) === true) {\n        //if ('array' in b) {\n        return map([a, b as Serie], ([v1, v2]) => vector(v1).dot(vector(v2)))\n    }\n    return map(a, (v1) => vector(v1).dot(vector(b as number[])))\n}\n\n// declare module \"@youwol/dataframe/src/lib/serie\" {\n//     export interface Serie {\n//         dot(a: Serie | vec.IVector)\n//     }\n// }\n// export {}\n// Serie.prototype.dot = function (b: Serie | vec.IVector) { return dot(this, b) }\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * Cross product only for [[Serie]]s with itemSize=3\n * @category Dataframe\n */\nexport const cross = (A: Serie, B: Serie): Serie => {\n    if (A === undefined) {\n        throw new Error('serie A is undefined')\n    }\n    if (B === undefined) {\n        throw new Error('serie B is undefined')\n    }\n    if (A.itemSize !== 3) {\n        throw new Error('cross only supports itemSize=3')\n    }\n    if (B.itemSize !== 3) {\n        throw new Error('cross only supports itemSize=3')\n    }\n\n    return A.map((a, i) => {\n        const b = B.itemAt(i)\n        return [\n            a[1] * b[2] - a[2] * b[1],\n            a[2] * b[0] - a[0] * b[2],\n            a[0] * b[1] - a[1] * b[0],\n        ]\n    })\n}\n","import { array, Serie } from '@youwol/dataframe'\n\n/**\n * If itemSize is > 1, normalize each item independently, otherwize\n * normalize the serie (since itemSize=1).\n * @category Dataframe\n */\nexport const normalize = (s: Serie): Serie => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    if (s.itemSize === 1) {\n        const mM = array.minMax(s.array)\n        const m = mM[0]\n        const l = 1 / (mM[1] - m)\n        return s.map((v) => l * (v - m))\n    }\n\n    return s.map((item) => {\n        const l = 1 / Math.sqrt(item.reduce((acc, v) => acc + v * v, 0))\n        //console.log(l)\n        return item.map((v) => v * l)\n    })\n}\n","import { array, Serie } from '@youwol/dataframe'\n\n/**\n * Transform each item of a serie into a unit interval and independently of each other.\n * For example, item [1,2,5], will be mapped into [0, 0.25, 1].\n * Otherwise, perform the transformation on the serie (e.g., for itemSize=1).\n * @category Dataframe\n */\nexport const unitInterval = (s: Serie): Serie => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    if (s.itemSize === 1) {\n        const mM = array.minMax(s.array)\n        const m = mM[0]\n        const l = 1 / (mM[1] - m)\n        return s.map((v) => l * (v - m))\n    }\n\n    return s.map((item) => {\n        const mM = array.minMax(item)\n        const m = mM[0]\n        const l = 1 / (mM[1] - m)\n        return item.map((v) => l * (v - m))\n    })\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe\n */\nexport const negate = (s: Serie): Serie => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    return Serie.create({\n        array: s.array.map((v) => -v),\n        itemSize: s.itemSize,\n        dimension: s.dimension,\n    })\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe\n */\nexport const invert = (s: Serie): Serie => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    return Serie.create({\n        array: s.array.map((v) => 1 / v),\n        itemSize: s.itemSize,\n        dimension: s.dimension,\n    })\n}\n","import { Serie } from '@youwol/dataframe'\nimport { add } from './add'\nimport { mult } from './mult'\n\n/**\n * Return a weighted sum of [[Serie]]s\n * @example\n * ```ts\n * // performs: 1*S1 + 2*S2 + 3*S3\n * const S = [\n *     createSerie( {data: createArray(18, i => i  ), itemSize: 6}), // S1\n *     createSerie( {data: createArray(18, i => i+1), itemSize: 6}), // S2\n *     createSerie( {data: createArray(18, i => i+2), itemSize: 6})  // S3\n * ]\n *\n * const r = weightedSum(S, [1,2,3])\n * console.log(r.array)\n *\n * // [ 8, 14, 20, 26,  32,  38,\n * //  44, 50, 56, 62,  68,  74,\n * //  80, 86, 92, 98, 104, 110 ]\n * ```\n * @category Dataframe\n */\nexport const weightedSum = (data: Serie[], alpha: number[]): Serie => {\n    if (alpha.length !== data.length) {\n        throw new Error(\n            `data length (${data.length}) should be equal to alpha length (${alpha.length})`,\n        )\n    }\n    return add(data.map((d, i) => mult(d, alpha[i])))\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * Perform the sum of items of a Serie\n * @category Dataframe\n */\nexport const sum = (a: Serie): number | number[] => {\n    if (a.itemSize === 1) {\n        let r = 0\n        a.forEach((v) => (r += v))\n        return r\n    }\n    const r = new Array(a.itemSize).fill(0)\n    a.forEach((item) => item.forEach((v, i) => (r[i] += v)))\n    return r\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @example\n * ```ts\n * const a = createSerie( {data: [1, 2, 3, 4, 5, 6]} )\n * console.log( tagNaN(a, v => v%2===0 ) )\n * // [ 1, NaN, 3, NaN, 5, NaN ]\n * ```\n * @category Dataframe\n */\nexport const tagNaN = (\n    a: Serie,\n    fn: (item: number | number[], i: number, s: Serie) => boolean,\n) => {\n    if (a.itemSize === 1) {\n        return a.map((item, i) => (fn(item, i, a) ? Number.NaN : item))\n    }\n    return a.map((item, i) =>\n        fn(item, i, a) ? new Array(a.itemSize).fill(Number.NaN) : item,\n    )\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @example\n * ```ts\n * const a = createSerie( {data: [1, 2, 3, 4, 5, 6]} )\n * console.log( round( rand(a, -10, 20 ) ) )\n * // [ 17, -5, 14, -5, 5, -8 ]\n * ```\n * @category Dataframe\n */\nexport const rand = (a: Serie, min = 0, max = 1) => {\n    const delta = max - min\n    if (a.itemSize === 1) {\n        return a.map(() => min + delta * Math.random())\n    }\n    return a.map(() =>\n        new Array(a.itemSize).fill(0).map(() => min + delta * Math.random()),\n    )\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe\n */\nexport const round = (a: Serie) => {\n    if (a.itemSize === 1) {\n        return a.map((v) => Math.round(v))\n    }\n    return a.map((v) => v.map((w) => Math.round(w)))\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe\n */\nexport const trunc = (a: Serie) => {\n    if (a.itemSize === 1) {\n        return a.map((v) => Math.trunc(v))\n    }\n    return a.map((v) => v.map((w) => Math.trunc(w)))\n}\n","import { array, Serie } from '@youwol/dataframe'\n\n/**\n * Get the min and max of a Serie.\n * The returned array is [min1, min2..., max1, max2...], where 1, 2...\n * is the itemSize.\n * @category Dataframe\n */\nexport const minMax = (s: Serie): number[] => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    if (s.itemSize === 1) {\n        return array.minMax(s.array)\n    }\n\n    const m = new Array(s.itemSize).fill(Number.POSITIVE_INFINITY)\n    const M = new Array(s.itemSize).fill(Number.NEGATIVE_INFINITY)\n    s.forEach((item) => {\n        item.forEach((v, i) => {\n            if (v < m[i]) {\n                m[i] = v\n            }\n            if (v > M[i]) {\n                M[i] = v\n            }\n        })\n    })\n    return [...m, ...M]\n}\n\n/**\n * Get the min of a Serie.\n * The returned type is the min or an array of mins (if itemSize>1)\n * @category Dataframe\n */\nexport const min = (s: Serie): number | number[] => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    if (s.itemSize === 1) {\n        return array.min(s.array)\n    }\n\n    const m = new Array(s.itemSize).fill(Number.POSITIVE_INFINITY)\n    s.forEach((item) => {\n        item.forEach((v, i) => {\n            if (v < m[i]) {\n                m[i] = v\n            }\n        })\n    })\n    return m\n}\n\n/**\n * Get the max of a Serie.\n * The returned type is the max or an array of maxs (if itemSize>1)\n * @category Dataframe\n */\nexport const max = (s: Serie): number | number[] => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    if (s.itemSize === 1) {\n        return array.max(s.array)\n    }\n\n    const m = new Array(s.itemSize).fill(Number.POSITIVE_INFINITY)\n    s.forEach((item) => {\n        item.forEach((v, i) => {\n            if (v > m[i]) {\n                m[i] = v\n            }\n        })\n    })\n    return m\n}\n","// import { array, reduce, Serie } from '@youwol/dataframe'\nimport { Serie, reduce } from '@youwol/dataframe'\n\n/**\n * Check if two series are strictly equals\n * @category Dataframe\n */\nexport const equals = (s1: Serie, s2: Serie): boolean => {\n    if (s1 === undefined) {\n        throw new Error('serie s1 is undefined')\n    }\n    if (s2 === undefined) {\n        throw new Error('serie s2 is undefined')\n    }\n\n    if (s1.itemSize !== s2.itemSize) {\n        return false\n    }\n    if (s1.count !== s2.count) {\n        return false\n    }\n\n    return reduce([s1, s2], (acc, [x, y]) => acc && x === y, true)\n\n    // Old impl:\n    // -----------------\n    // const reduced = reduce( [s1,s2], ([x,y]) => x===y, true )\n    // return reduced.array.reduce( (acc, val) => acc&&val, true )\n}\n","import { reduce, Serie } from '@youwol/dataframe'\n\n/**\n * Check if two series are closely equals (at epsilon)\n * @category Dataframe\n */\nexport const closeTo = (s1: Serie, s2: Serie, eps = 1e-7): boolean => {\n    if (s1 === undefined) {\n        throw new Error('serie s1 is undefined')\n    }\n    if (s2 === undefined) {\n        throw new Error('serie s2 is undefined')\n    }\n\n    if (s1.itemSize !== s2.itemSize) {\n        return false\n    }\n    if (s1.count !== s2.count) {\n        return false\n    }\n\n    return reduce([s1, s2], (acc, [x, y]) => acc && Math.abs(x - y) < eps, true)\n\n    // const reduced = reduce( [s1,s2], ([x,y]) => Math.abs(x-y)<eps, true )\n    // return reduced.array.reduce( (acc, val) => acc&&val, true )\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * Get the indices of Nan values in a serie. For series with itemSize>1,\n * return the indices of the items\n * @example\n * ```ts\n * const a = createSerie( {data: [1, 2, NaN, 4, NaN, 6], itemSize: 1} )\n * console.log( getNaN(a) )\n * // [ 2, 4 ]\n * ```\n * @category Dataframe\n */\nexport const getNaN = (a: Serie) => {\n    const r: Array<number> = []\n\n    if (a.itemSize === 1) {\n        a.forEach((item, i) => {\n            if (Number.isNaN(item)) {\n                r.push(i)\n            }\n        })\n    } else {\n        const n = a.itemSize\n        a.forEach((item, i) => {\n            for (let j = 0; j < n; ++j) {\n                if (Number.isNaN(item[j])) {\n                    r.push(i)\n                    break\n                }\n            }\n        })\n    }\n\n    return r\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * Inverse of matrix3\n * @category Dataframe\n */\nexport const inv = (s: Serie, throwOnDegenerate = false): Serie => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    const isize = s.itemSize\n\n    if (s.dimension === 2 && (isize === 3 || isize === 4)) {\n        return s.map((m, index) => {\n            const n = [0, 0, 0, 0]\n            if (isize === 4) {\n                n[0] = m[0]\n                n[1] = m[1]\n                n[2] = m[2]\n                n[3] = m[3]\n            } else {\n                n[0] = m[0]\n                n[1] = m[1]\n                n[2] = m[1]\n                n[3] = m[2]\n            }\n\n            const det = n[0] * n[3] - n[1] * n[2]\n            if (det === 0) {\n                const msg = `matrix at index${index} has a determinant = 0`\n                if (throwOnDegenerate === true) {\n                    throw new Error(msg)\n                } else {\n                    console.warn(msg)\n                }\n                return isize === 3 ? [0, 0, 0] : [0, 0, 0, 0]\n            }\n\n            const invdet = 1 / det\n            return isize === 3\n                ? [n[3] * invdet, -n[1] * invdet, n[0] * invdet]\n                : [n[3] * invdet, -n[1] * invdet, -n[2] * invdet, n[0] * invdet]\n        })\n    } else if (s.dimension === 3 && (isize === 6 || isize === 9)) {\n        if (isize === 9) {\n            // https://stackoverflow.com/a/18504573\n            return s.map((m, index) => {\n                const det =\n                    m[0] * (m[4] * m[8] - m[7] * m[5]) -\n                    m[1] * (m[3] * m[8] - m[5] * m[6]) +\n                    m[2] * (m[3] * m[7] - m[4] * m[6])\n\n                if (det === 0) {\n                    const msg = `matrix at index${index} has a determinant = 0`\n                    if (throwOnDegenerate === true) {\n                        throw new Error(msg)\n                    } else {\n                        console.warn(msg)\n                    }\n                    return [0, 0, 0, 0, 0, 0, 0, 0, 0]\n                }\n                const invdet = 1 / det\n                const minv = []\n                minv[0] = (m[4] * m[8] - m[7] * m[5]) * invdet\n                minv[1] = (m[2] * m[7] - m[1] * m[8]) * invdet\n                minv[2] = (m[1] * m[5] - m[2] * m[4]) * invdet\n                minv[3] = (m[5] * m[6] - m[3] * m[8]) * invdet\n                minv[4] = (m[0] * m[8] - m[2] * m[6]) * invdet\n                minv[5] = (m[3] * m[2] - m[0] * m[5]) * invdet\n                minv[6] = (m[3] * m[7] - m[6] * m[4]) * invdet\n                minv[7] = (m[6] * m[1] - m[0] * m[7]) * invdet\n                minv[8] = (m[0] * m[4] - m[3] * m[1]) * invdet\n                return minv\n            })\n        } else {\n            return s.map((me, index) => {\n                const n11 = me[0],\n                    n12 = me[1],\n                    n13 = me[2],\n                    n21 = n12,\n                    n22 = me[3],\n                    n23 = me[4],\n                    n31 = n13,\n                    n32 = n23,\n                    n33 = me[5]\n                const t11 = n33 * n22 - n32 * n23,\n                    t12 = n32 * n13 - n33 * n12,\n                    t13 = n23 * n12 - n22 * n13,\n                    det = n11 * t11 + n21 * t12 + n31 * t13\n\n                if (det === 0) {\n                    const msg = `matrix at index${index} has a determinant = 0`\n                    if (throwOnDegenerate === true) {\n                        throw new Error(msg)\n                    } else {\n                        console.warn(msg)\n                    }\n                    return [0, 0, 0, 0, 0, 0]\n                }\n\n                const detInv = 1 / det\n                return [\n                    t11 * detInv,\n                    t12 * detInv,\n                    t13 * detInv,\n                    (n33 * n11 - n31 * n13) * detInv,\n                    (n31 * n12 - n32 * n11) * detInv,\n                    (n22 * n11 - n21 * n12) * detInv,\n                ]\n            })\n        }\n    } else {\n        throw new Error(\n            `Series does not have itemSize = 3, 4, 6 or 9 ([xx,xy,yy], [xx,xy,xz,yy,yz,zz], [xx, xy, yx, yy] or [xx,xy,xz,yx,yy,yz,zx,zy,zz]). Got ${isize}`,\n        )\n    }\n}\n","import { Serie } from '@youwol/dataframe'\nimport { mat } from '..'\nimport { multMat } from './multMat'\nimport { transpose } from './transpose'\n\n/**\n * @see [[getRotationAxis]] to generate a rotation matrix\n * @category Dataframe\n */\nexport const rotate = (\n    s: Serie,\n    rot: Serie | mat.Matrix3,\n    inverse = false,\n): Serie => {\n    if (s === undefined) {\n        throw new Error('s is undefined')\n    }\n    if (rot === undefined) {\n        throw new Error('rot is undefined')\n    }\n\n    if (inverse) {\n        if (Array.isArray(rot)) {\n            if (s.itemSize === 1) {\n                return s.clone()\n            }\n            if (s.itemSize === 3) {\n                const R = mat.transpose(rot)\n                return s.map((v) => mat.multVec(R, v))\n            }\n            if (s.itemSize === 9) {\n                return s.map((m) => mat.rotateInverse(mat.unpack(m), rot))\n            }\n            return s.map((m) =>\n                mat.pack(mat.rotateInverse(mat.unpack(m), rot), true),\n            )\n        } else {\n            if (rot.itemSize !== 9) {\n                throw new Error('rot should have itemSize=9')\n            }\n            if (s.itemSize === 1) {\n                return s.clone()\n            }\n            if (s.itemSize === 3) {\n                return multMat(transpose(rot), s)\n            }\n            return multMat(transpose(rot), multMat(s, rot))\n        }\n    } else {\n        if (Array.isArray(rot)) {\n            if (s.itemSize === 1) {\n                return s.clone()\n            }\n            if (s.itemSize === 3) {\n                return s.map((v) => mat.multVec(rot, v))\n            }\n            if (s.itemSize === 9) {\n                return s.map((m) => mat.rotateForward(mat.unpack(m), rot))\n            }\n            return s.map((m) =>\n                mat.pack(mat.rotateForward(mat.unpack(m), rot), true),\n            )\n        } else {\n            if (rot.itemSize !== 9) {\n                throw new Error('rot should have itemSize=9')\n            }\n            if (s.itemSize === 1) {\n                return s.clone()\n            }\n            if (s.itemSize === 3) {\n                return multMat(rot, s)\n            }\n            return multMat(rot, multMat(s, transpose(rot)))\n        }\n    }\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe\n */\nexport const translate = (s: Serie, t: number[]): Serie => {\n    if (s === undefined) {\n        throw new Error('s is undefined')\n    }\n    if (t === undefined) {\n        throw new Error('t is undefined')\n    }\n    if (t.length !== s.itemSize) {\n        throw new Error(\n            `t should be of length ${s.itemSize} (same as serie itemSize)`,\n        )\n    }\n\n    if (s.itemSize === 1) {\n        return s.map((v) => v * t[0])\n    }\n\n    return s.map((v) => v.map((w, i) => w + t[i]))\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe\n */\nexport const scale = (s: Serie, t: number[] | number): Serie => {\n    if (s === undefined) {\n        throw new Error('s is undefined')\n    }\n    if (t === undefined) {\n        throw new Error('t is undefined')\n    }\n\n    if (Array.isArray(t)) {\n        if (s.itemSize === 1) {\n            return s.map((v) => v * t[0])\n        } else {\n            if (t.length !== s.itemSize) {\n                throw new Error(\n                    `t should be of length ${s.itemSize} (same as serie itemSize)`,\n                )\n            }\n            return s.map((v) => v.map((w, i) => w * t[i]))\n        }\n    }\n\n    if (s.itemSize === 1) {\n        return s.map((v) => v * t)\n    }\n\n    return s.map((v) => v.map((w) => w * t))\n}\n","import { Serie, array } from '@youwol/dataframe'\n\n/**\n * Randomly shuffle a Serie\n *\n * @example\n * ```js\n * import { Serie }   from '@youwol/dataframe\n * import { shuffle } from '@youwol/math\n *\n * const s1 = Serie.create({array: [1,2,3, 9,8,7, 5,6,7], itemSize: 3})\n * const s2 = shuffle(s1) // e.g., [9,8,7, 5,6,7, 1,2,3]\n * ```\n *\n * @category Dataframe\n */\nexport function shuffle(serie: Serie) {\n    const arr = []\n    serie.forEach((i) => arr.push(i))\n\n    let currentIndex = arr.length\n    let randomIndex: number\n\n    while (currentIndex != 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex)\n        currentIndex--\n        ;[arr[currentIndex], arr[randomIndex]] = [\n            arr[randomIndex],\n            arr[currentIndex],\n        ]\n    }\n\n    return Serie.create({\n        array: array.flatten(arr),\n        itemSize: serie.itemSize,\n        dimension: serie.dimension,\n    })\n}\n","import { Serie, squaredMatrix, symSquaredMatrix } from '@youwol/dataframe'\n\n/**\n * Get the determinant of each item of a [[Serie]] (if matrix).\n * itemSize should (for the moment) either 6 (symmetric matrix) or 9.\n * @category Dataframe\n */\nexport function determinant(s: Serie) {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    if ((s.itemSize === 3 || s.itemSize === 4) && s.dimension === 2) {\n        const matrix = (v: number[]) =>\n            v.length === 3 ? symSquaredMatrix(v) : squaredMatrix(v)\n        return s.map((v) => {\n            const m = matrix(v)\n            return m.at(0, 0) * m.at(1, 1) - m.at(0, 1) * m.at(1, 0)\n        })\n    } else if ((s.itemSize === 6 || s.itemSize === 9) && s.dimension === 3) {\n        const matrix = (v: number[]) =>\n            v.length === 6 ? symSquaredMatrix(v) : squaredMatrix(v)\n        return s.map((v) => {\n            const m = matrix(v)\n            return (\n                m.at(0, 0) * m.at(1, 1) * m.at(2, 2) -\n                m.at(0, 0) * m.at(1, 2) * m.at(2, 1) -\n                m.at(0, 1) * m.at(1, 0) * m.at(2, 2) +\n                m.at(0, 1) * m.at(1, 2) * m.at(2, 0) +\n                m.at(0, 2) * m.at(1, 0) * m.at(2, 1) -\n                m.at(0, 2) * m.at(1, 1) * m.at(2, 0)\n            )\n        })\n    } else {\n        throw new Error('item size should be 3, 4, 6 or 9')\n    }\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * Convert a 2D or 3D stress tensor (symmetric tensors in the form [xx,xy,yy] or [xx,xy,xz,yy,yz,zz])\n * given in engineer, into geologist convention (or the other way around).\n * Two calls give the initial serie.\n * @example\n * ```ts\n * let stress = ... // stress in engineer convention\n * stress = switchConvention(stress) // stress in geologist convention\n * stress = switchConvention(stress) // stress in engineer convention\n * ```\n * @category Dataframe\n */\nexport const switchConvention = (s: Serie) => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n    if (s.itemSize !== 6 && s.itemSize !== 3) {\n        throw new Error(\n            'Series does not have itemSize = 3 or 6 (symmetric tensor [xx,xy,yy] or [xx,xy,xz,yy,yz,zz])',\n        )\n    }\n\n    return s.map((stress) => {\n        return stress.map((v) => -v)\n    })\n}\n","import {\n    Serie,\n    createTyped,\n    DataFrame,\n    Decomposer,\n    exists,\n} from '@youwol/dataframe'\nimport { vec } from '../'\n\nexport function normals(positions: Serie, indices: Serie): Serie {\n    if (!positions || !indices) {\n        return undefined\n    }\n\n    const data = new Array(indices.count).fill(0)\n\n    let i = 0\n    indices.forEach((t) => {\n        const v1 = positions.itemAt(t[0]) as vec.Vector3\n        const v2 = positions.itemAt(t[1]) as vec.Vector3\n        const v3 = positions.itemAt(t[2]) as vec.Vector3\n        const n = vec.cross(\n            vec.create(v1, v2) as vec.Vector3,\n            vec.create(v1, v3) as vec.Vector3,\n        )\n        data[i++] = n[0]\n        data[i++] = n[1]\n        data[i++] = n[2]\n    })\n\n    return Serie.create({\n        array: createTyped(Float32Array, data, true),\n        itemSize: 3,\n    })\n}\n","import { Serie } from '@youwol/dataframe'\nimport { normals } from \"./normals\"\nimport { div } from \"./div\"\nimport { norm } from \"./norm\"\n\n/**\n * @category Dataframe\n */\nexport const areas = (positions: Serie, indices: Serie): Serie => {\n    if (!positions || !indices) {\n        return undefined\n    }\n    const ns = normals(positions, indices)\n    return ns === undefined ? undefined : div(norm(ns), 2)\n}\n","import {\n    Serie,\n    createTyped\n} from '@youwol/dataframe'\nimport { vec } from '../'\n\nexport function barycenters(positions: Serie, indices: Serie): Serie {\n    if (!positions || !indices) {\n        return undefined\n    }\n\n    const data = new Array(indices.count).fill(0)\n\n    let i = 0\n    indices.forEach((t) => {\n        const v1 = positions.itemAt(t[0]) as vec.Vector3\n        const v2 = positions.itemAt(t[1]) as vec.Vector3\n        const v3 = positions.itemAt(t[2]) as vec.Vector3\n        data[i++] = (v1[0] + v2[0] + v3[0]) / 3\n        data[i++] = (v1[1] + v2[1] + v3[1]) / 3\n        data[i++] = (v1[2] + v2[2] + v3[2]) / 3\n    })\n\n    return Serie.create({\n        array: createTyped(Float32Array, data, true),\n        itemSize: 3,\n    })\n}\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe/stats\n */\nexport const mean = (s: Serie): number | number[] => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n\n    const n = s.itemSize\n    if (n === 1) {\n        return s.array.reduce((acc, v) => acc + v, 0) / s.length\n    }\n\n    const r = new Array(n).fill(0)\n\n    s.forEach((v) => {\n        for (let j = 0; j < n; ++j) {\n            r[j] += v[j] / s.count\n        }\n    })\n\n    return r\n}\n","import { sub, mult } from '../'\nimport { Serie } from '@youwol/dataframe'\nimport { mean } from './mean'\n\n/**\n * Compute covariance with Series.\n *\n * Except from Wikipedia:\n * > In probability theory and statistics, covariance is a measure of the joint variability\n * of two random variables. If the greater values of one variable mainly correspond with\n * the greater values of the other variable, and the same holds for the lesser values\n * (that is, the variables tend to show similar behavior), the covariance is positive.\n * In the opposite case, when the greater values of one variable mainly correspond to\n * the lesser values of the other, (that is, the variables tend to show opposite behavior),\n * the covariance is negative. The sign of the covariance therefore shows the tendency in the\n * linear relationship between the variables. The magnitude of the covariance is not easy to\n * interpret because it is not normalized and hence depends on the magnitudes of the variables.\n * The normalized version of the covariance, the correlation coefficient, however, shows\n * by its magnitude the strength of the linear relation.\n * @category Dataframe/stats\n */\nexport const covariance = (x: Serie, y: Serie): number => {\n    if (x.length !== y.length) {\n        throw new Error('x and y must have the same length')\n    }\n    if (x.itemSize !== 1) {\n        throw new Error('x must have itemSize = 1')\n    }\n    if (y.itemSize !== 1) {\n        throw new Error('y must have itemSize = 1')\n    }\n\n    const N = x.length\n    const xb = mean(x) as number\n    const yb = mean(y) as number\n    return mult(sub(x, xb), sub(y, yb)).array.reduce(\n        (acc, value) => acc + value / N,\n        0,\n    )\n}\n","import { Serie } from '@youwol/dataframe'\nimport { covariance } from './covariance'\n\n/**\n * Compute variance of a Serie\n * @category Dataframe/stats\n */\nexport const variance = (x: Serie): number => covariance(x, x)\n","import { Serie } from '@youwol/dataframe'\n\n/**\n * @category Dataframe/stats\n */\nexport const weightedMean = (s: Serie, w: Serie): number | number[] => {\n    if (s === undefined) {\n        throw new Error('s is undefined')\n    }\n    if (w === undefined) {\n        throw new Error('w is undefined')\n    }\n    if (w.count !== s.count) {\n        throw new Error(`count mismatch for s (${s.count}) and w (${w.count})`)\n    }\n    if (w.itemSize !== 1) {\n        throw new Error(`itemSize for w should be 1 (got ${w.itemSize})`)\n    }\n\n    const W = w.array.reduce((acc, v) => acc + v, 0)\n\n    const n = s.itemSize\n    if (n === 1) {\n        return s.array.reduce((acc, v, i) => acc + v * w.array[i], 0) / W\n    }\n\n    const r = new Array(n).fill(0)\n\n    s.forEach((v, i) => {\n        for (let j = 0; j < n; ++j) {\n            r[j] += w.array[i] * v[j] // /s.count\n        }\n    })\n\n    return r.map((v) => v / W)\n}\n","import { check, cut, Serie, sort } from '@youwol/dataframe'\n\n/**\n * See https://en.wikipedia.org/wiki/Box_plot\n * @category Dataframe/stats\n */\nexport const quantile = (s: Serie, q: number): number => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n    if (s.itemSize !== 1) {\n        throw new Error('quantile algorithm: itemSize must be 1')\n    }\n    if (q < 0) {\n        throw new Error('quantile must be >= 0')\n    }\n    if (q > 1) {\n        throw new Error('quantile must be <= 1')\n    }\n\n    const newSerie = sort(s)\n    const sorted = newSerie.array\n    const pos = (sorted.length - 1) * q\n    const base = Math.floor(pos)\n    const rest = pos - base\n    if (sorted[base + 1] !== undefined) {\n        return sorted[base] + rest * (sorted[base + 1] - sorted[base])\n    } else {\n        return sorted[base]\n    }\n}\n\n/**\n * @category Dataframe/stats\n */\nexport const q25 = (s: Serie): number => quantile(s, 0.25)\n\n/**\n * @category Dataframe/stats\n */\nexport const q50 = (s: Serie): number => quantile(s, 0.5)\n\n/**\n * @category Dataframe/stats\n */\nexport const q75 = (s: Serie): number => quantile(s, 0.75)\n\n/**\n * @category Dataframe/stats\n */\nexport const IQR = (s: Serie): number => quantile(s, 0.75) - quantile(s, 0.25)\n\n/**\n * @category Dataframe/stats\n */\nexport const outliers = (s: Serie, mustache: number): Serie => {\n    const o = __ouliers__(s, mustache)\n    return cut(s, (v) => v < o.min || v > o.max)\n}\n\n/**\n * Return a serie of boolean indicating if an item of the serie s is an outliers or not\n * @category Dataframe/stats\n */\nexport const isOutliers = (s: Serie, mustache: number): Serie => {\n    const o = __ouliers__(s, mustache)\n    return check(s, (v) => v < o.min || v > o.max)\n}\n\n/**\n * @see https://en.wikipedia.org/wiki/Interquartile_range\n * @see https://en.wikipedia.org/wiki/Box_plot\n * @param mustache The statistical distance for which a point is considered as outlier. Default 1.5\n * @category Dataframe/stats\n */\nexport const notOutliers = (s: Serie, mustache = 1.5): Serie => {\n    const o = __ouliers__(s, mustache)\n    return cut(s, (v) => v >= o.min && v <= o.max)\n}\n\n// -----------------------------------------\n\nconst __ouliers__ = (s: Serie, mustache: number) => {\n    const Q25 = q25(s)\n    const Q75 = q75(s)\n    const iqr = Q75 - Q25\n    return {\n        min: Q25 - mustache * iqr,\n        max: Q75 + mustache * iqr,\n    }\n}\n","import { Serie } from '@youwol/dataframe'\nimport { sum } from '../sum'\nimport { mean } from './mean'\n\n/**\n * See https://en.wikipedia.org/wiki/Box_plot\n * @category Dataframe/stats\n */\nexport const std = (s: Serie): number => {\n    if (s === undefined) {\n        throw new Error('series is undefined')\n    }\n    if (s.itemSize !== 1) {\n        throw new Error('quantile algorithm: itemSize must be 1')\n    }\n\n    const mu = mean(s) as number\n    const diffArr = s.map((a) => (a - mu) ** 2)\n    return Math.sqrt((sum(diffArr) as number) / (s.length - 1))\n}\n","import { Serie } from '@youwol/dataframe'\nimport { max, min } from '../minMax'\nimport { mean } from './mean'\nimport { q25, q50, q75 } from './quantile'\nimport { std } from './std'\n\n/**\n * @category Dataframe/stats\n */\nexport const describe = (\n    s: Serie,\n): {\n    count: number\n    mean: number | number[]\n    std: number\n    min: number | number[]\n    max: number | number[]\n    q25: number\n    q50: number\n    q75: number\n} => {\n    if (s === undefined) {\n        throw new Error('serie is undefined')\n    }\n    if (s.itemSize !== 1) {\n        throw new Error('serie must have itemSize = 1')\n    }\n\n    return {\n        count: s.count,\n        mean: mean(s),\n        std: std(s),\n        min: min(s),\n        q25: q25(s),\n        q50: q50(s),\n        q75: q75(s),\n        max: max(s),\n    }\n}\n","import { Serie } from '@youwol/dataframe'\nimport { minMax } from '../minMax'\n\n/**\n * Bin a serie using either the size of a bin or the number of bins. If the start is not\n * provided, the minimum of the serie is used. If the stop is not provided, the maximum\n * of the serie is used.\n * @example\n * ```js\n * const b1 = bins(serie, {size:5, start:0, stop: 90})\n * const b2 = bins(serie, {nb: 18, start:0, stop: 90})\n * const b3 = bins(serie, {nb: 20})\n * ```\n * @category Dataframe/stats\n */\nexport function bins(\n    serie: Serie,\n    {\n        size,\n        nb,\n        start,\n        stop,\n    }: { size?: number; nb?: number; start?: number; stop?: number },\n): Serie {\n    if (serie.itemSize !== 1) {\n        throw new Error('itemSize should be 1')\n    }\n    if (size === undefined && nb === undefined) {\n        throw new Error('size or nb must be provided')\n    }\n\n    const m = minMax(serie)\n    if (start === undefined) {\n        start = m[0]\n    }\n    if (stop === undefined) {\n        stop = m[1]\n    }\n\n    if (nb !== undefined) {\n        size = (stop - start) / nb\n    } else {\n        nb = Math.trunc(stop - start) / size\n    }\n\n    // binning\n    const b = new Array(nb).fill(0)\n    serie.forEach((v) => {\n        let i = Math.trunc((v - start) / size)\n        if (i >= nb) {\n            i = nb - 1\n        }\n        if (i < 0 || i >= nb) {\n            throw new Error(`index for bin (${i}) out of bounds (0, ${nb})`)\n        }\n        b[i]++\n    })\n\n    return Serie.create({ array: b, itemSize: 1 })\n}\n","import {\n    apply,\n    Serie,\n    DataFrame,\n    Decomposer,\n    nameOfSerie,\n} from '@youwol/dataframe'\n\n/**\n * Allows to get components of serie for which itemSize > 1.\n *\n * For instance, for a serie named `U` with `itemSize=2` and `dimension=2`, components names will be\n * `Ux` and `Uy` (2 components).\n *\n * For a serie named `U` with `itemSize=3` and `dimension=3`, components names will be\n * `Ux`, `Uy` and `Uz` (3 components).\n *\n * For a serie named `S` with `itemSize=3` and `dimension=2` (symmetric rank 2 tensor of dim 2), components names will be\n * `Sxx`, `Sxy` and `Syy` (3 components).\n *\n * For a serie named `S` with `itemSize=4` and `dimension=2` (general rank 2 tensor of dim 2), components names will be\n * `Sxx`, `Sxy`, `Syx` and `Syy` (4 components).\n *\n * For a serie named `S` with `itemSize=6` and `dimension=3` (symmetric rank 2 tensor of dim 3), components names will be\n * `Sxx`, `Sxy`, `Sxz`, `Syy`, `Syz` and `Szz` (6 components).\n *\n * For a serie named `S` with `itemSize=9` and `dimension=3` (general rank 2 tensor of dim 3), components names\n * will be `Sxx`, `Sxy`, `Sxz`, `Syx`, `Syy`, `Syz`, `Szx`, `Szy` and `Szz` (9 components).\n *\n * For all other series, index number are appended to the serie's name, starting at zero.\n * That is to say, for a serie named `E` with `itemSize=5`, components names will be\n * `E0`, `E1`, `E2`, `E3` and `E4`.\n * @category Dataframe/decomposers\n */\nexport class ComponentDecomposer implements Decomposer {\n    /**\n     * @hidden\n     */\n    names(df: DataFrame, itemSize: number, serie: Serie, name: string) {\n        // Avoid using 'positions' and 'indices'\n        if (name === 'positions' || name === 'indices') {\n            return []\n        }\n\n        // Passed name is, e.g., 'U' && itemSize=3 && dimension=3\n        const sname = nameOfSerie(df, serie)\n        if (name === sname && serie.itemSize === 1) {\n            return []\n        }\n        if (itemSize > 1) {\n            return []\n        }\n\n        if (serie.dimension === 2) {\n            switch (serie.itemSize) {\n                case 2:\n                    return vector2Names.map((n) => name + n)\n                case 3:\n                    return smatrix2Names.map((n) => name + n)\n                case 4:\n                    return matrix2Names.map((n) => name + n)\n            }\n        } else {\n            switch (serie.itemSize) {\n                case 3:\n                    return vector3Names.map((n) => name + n)\n                case 6:\n                    return smatrix3Names.map((n) => name + n)\n                case 9:\n                    return matrix3Names.map((n) => name + n)\n            }\n        }\n\n        const names = []\n        for (let i = 0; i < itemSize; ++i) {\n            names.push(name + i)\n        }\n        return names\n    }\n    /**\n     * @hidden\n     */\n    serie(df: DataFrame, itemSize: number, name: string): Serie {\n        if (itemSize > 1) {\n            return undefined\n        }\n\n        // vector2 / vector3\n        let newName = name.substring(0, name.length - 1)\n        let serie = df.series[newName]\n        if (serie) {\n            if (serie.dimension === 2) {\n                for (let i = 0; i < vector2Names.length; ++i) {\n                    if (name === newName + vector2Names[i]) {\n                        return apply(serie, (item) => item[i])\n                    }\n                }\n            } else {\n                for (let i = 0; i < vector3Names.length; ++i) {\n                    if (name === newName + vector3Names[i]) {\n                        return apply(serie, (item) => item[i])\n                    }\n                }\n            }\n        }\n\n        // (smatrix2 and matrix2) / (smatrix3 and matrix3)\n        newName = name.substring(0, name.length - 2)\n        serie = df.series[newName]\n        if (serie) {\n            if (serie.dimension === 2) {\n                for (let i = 0; i < smatrix2Names.length; ++i) {\n                    if (name === newName + smatrix2Names[i]) {\n                        return apply(serie, (item) => item[i])\n                    }\n                }\n                for (let i = 0; i < matrix2Names.length; ++i) {\n                    if (name === newName + matrix2Names[i]) {\n                        return apply(serie, (item) => item[i])\n                    }\n                }\n            } else {\n                for (let i = 0; i < smatrix3Names.length; ++i) {\n                    if (name === newName + smatrix3Names[i]) {\n                        return apply(serie, (item) => item[i])\n                    }\n                }\n                for (let i = 0; i < matrix3Names.length; ++i) {\n                    if (name === newName + matrix3Names[i]) {\n                        return apply(serie, (item) => item[i])\n                    }\n                }\n            }\n        }\n\n        // Others: use integer\n        newName = name.substring(0, name.length - 1)\n        serie = df.series[newName]\n        if (serie) {\n            for (let i = 0; i < itemSize; ++i) {\n                if (name === newName + i) {\n                    return apply(serie, (item) => item[i])\n                }\n            }\n        }\n    }\n}\n\nconst vector2Names = ['x', 'y']\nconst smatrix2Names = ['xx', 'xy', 'yy']\nconst matrix2Names = ['xx', 'xy', 'yx', 'yy']\n\nconst vector3Names = ['x', 'y', 'z']\nconst smatrix3Names = ['xx', 'xy', 'xz', 'yy', 'yz', 'zz']\nconst matrix3Names = ['xx', 'xy', 'xz', 'yx', 'yy', 'yz', 'zx', 'zy', 'zz']\n","import { Serie, DataFrame, Decomposer, apply } from '@youwol/dataframe'\n\n/**\n * Make x, y and z coordinates accessible as serie if `position' is\n * present in the dataframe.\n * @category Dataframe/decomposers\n */\nexport class PositionDecomposer implements Decomposer {\n    /**\n     *\n     * @param names_ The names for the position coordinates\n     * @default names = `['x', 'y', 'z']`\n     */\n    constructor(private readonly names_ = ['x', 'y', 'z']) {\n        if (names_.length !== 3) {\n            throw new Error(\n                'names must be an array of 3 strings (the dimension)',\n            )\n        }\n    }\n    /**\n     * @hidden\n     */\n    names(df: DataFrame, itemSize: number, serie: Serie, name: string) {\n        if (itemSize !== 1 || name !== 'positions') {\n            return []\n        }\n        return this.names_\n    }\n\n    /**\n     * @hidden\n     */\n    serie(df: DataFrame, itemSize: number, name: string): Serie {\n        if (itemSize === 1) {\n            const serie = df.series['positions']\n            switch (name) {\n                case this.names_[0]:\n                    return apply(serie, (item) => item[0])\n                case this.names_[1]:\n                    return apply(serie, (item) => item[1])\n                case this.names_[2]:\n                    return apply(serie, (item) => item[2])\n            }\n        }\n        return undefined\n    }\n}\n","import { apply, Serie, DataFrame, Decomposer } from '@youwol/dataframe'\nimport { eigenValue, eigenVector } from '..'\n\n/**\n * Eigen values for series with itemSize = 3 or 6\n * @category Dataframe/decomposers\n */\nexport class EigenValuesDecomposer implements Decomposer {\n    /**\n     * @hidden\n     */\n    names(df: DataFrame, itemSize: number, serie: Serie, name: string) {\n        if (name === 'positions' || name === 'indices') {\n            return []\n        }\n        if (serie.dimension === 2 && (serie.itemSize !== 3 || itemSize !== 1)) {\n            return []\n        }\n        if (serie.dimension === 3 && (serie.itemSize !== 6 || itemSize !== 1)) {\n            return []\n        }\n\n        if (serie.dimension === 2) {\n            return [name + '1', name + '2']\n        }\n        return [name + '1', name + '2', name + '3']\n    }\n    /**\n     * @hidden\n     */\n    serie(df: DataFrame, itemSize: number, name: string): Serie {\n        if (itemSize !== 1) {\n            return undefined\n        }\n        const newName = name.substring(0, name.length - 1)\n        const serie = df.series[newName]\n        const id = parseInt(name.charAt(name.length - 1))\n\n        if (serie === undefined) {\n            return undefined\n        }\n\n        if (serie.dimension === 2) {\n            if (serie.itemSize !== 3) {\n                return undefined\n            }\n            if (id < 1 || id > 2) {\n                return undefined\n            }\n        } else {\n            if (serie.itemSize !== 6) {\n                return undefined\n            }\n            if (id < 1 || id > 3) {\n                return undefined\n            }\n        }\n\n        return apply(eigenValue(serie), (item) => item[id - 1])\n    }\n}\n\n/**\n * Eigen vectors for series with itemSize = 3 or 6\n * @category Dataframe/decomposers\n */\nexport class EigenVectorsDecomposer implements Decomposer {\n    /**\n     * @hidden\n     */\n    names(df: DataFrame, itemSize: number, serie: Serie, name: string) {\n        if (name === 'positions' || name === 'indices') {\n            return []\n        }\n        if (serie.dimension === 2) {\n            if (serie.itemSize !== 3 || itemSize !== 2) {\n                return []\n            }\n            return [name + '1', name + '2']\n        } else {\n            if (serie.itemSize !== 6 || itemSize !== 3) {\n                return []\n            }\n            return [name + '1', name + '2', name + '3']\n        }\n    }\n    /**\n     * @hidden\n     */\n    serie(df: DataFrame, itemSize: number, name: string): Serie {\n        const newName = name.substring(0, name.length - 1)\n        let id = parseInt(name.charAt(name.length - 1))\n\n        const serie = df.series[newName]\n        if (serie === undefined) {\n            return undefined\n        }\n\n        if (serie.dimension === 2) {\n            if (itemSize !== 2) {\n                return undefined\n            }\n            if (serie === undefined) {\n                return undefined\n            }\n            if (serie.itemSize !== 3) {\n                return undefined\n            }\n            if (id < 1 || id > 2) {\n                return undefined\n            }\n\n            id -= 1 // now in between 0 and 1\n            return apply(eigenVector(serie), (item) => [\n                item[2 * id],\n                item[2 * id + 1],\n            ])\n        } else {\n            if (itemSize !== 3) {\n                return undefined\n            }\n            if (serie === undefined) {\n                return undefined\n            }\n            if (serie.itemSize !== 6) {\n                return undefined\n            }\n            if (id < 1 || id > 3) {\n                return undefined\n            }\n\n            id -= 1 // now in between 0 and 2\n            return apply(eigenVector(serie), (item) => [\n                item[3 * id],\n                item[3 * id + 1],\n                item[3 * id + 2],\n            ])\n        }\n    }\n}\n","import { Serie, DataFrame, Decomposer } from '@youwol/dataframe'\nimport { norm } from '..'\n\n/**\n * Get the norm of any serie with itemSize > 1 (i.e., norm of any vector)\n * @category Dataframe/decomposers\n */\nexport class VectorNormDecomposer implements Decomposer {\n    /**\n     * @hidden\n     */\n    names(df: DataFrame, itemSize: number, serie: Serie, name: string) {\n        if (name === 'positions' || name === 'indices') {\n            return []\n        }\n        if (serie.itemSize <= 1 || itemSize !== 1) {\n            return []\n        }\n        if (\n            (serie.dimension === 2 && serie.itemSize === 2) ||\n            (serie.dimension === 3 && serie.itemSize === 3)\n        ) {\n            return [name] // same name as the vector but will be a scalar (itemSize=1)\n        }\n        return []\n    }\n    /**\n     * @hidden\n     */\n    serie(df: DataFrame, itemSize: number, name: string): Serie {\n        if (itemSize !== 1) {\n            return undefined\n        }\n        if (name === 'positions' || name === 'indices') {\n            return undefined\n        }\n\n        const serie = df.series[name] // since same name\n        if (serie === undefined) {\n            return undefined\n        }\n        if (serie.itemSize <= 1) {\n            return undefined\n        }\n\n        if (\n            (serie.dimension === 2 && serie.itemSize === 2) ||\n            (serie.dimension === 3 && serie.itemSize === 3)\n        ) {\n            return norm(serie)\n        }\n\n        return undefined\n    }\n}\n","import {\n    Serie,\n    createTyped,\n    DataFrame,\n    Decomposer,\n    exists,\n} from '@youwol/dataframe'\nimport { vec } from '../../'\n\n/**\n * Get normals to the triangles of a mesh\n * @category Dataframe/decomposers\n */\nexport class NormalsDecomposer implements Decomposer {\n    constructor(private readonly name: string = 'normals') {}\n    /**\n     * @hidden\n     */\n    names(df: DataFrame, itemSize: number, _serie: Serie, _name: string) {\n        if (itemSize !== 3) {\n            return []\n        }\n        if (!exists(df, 'positions') && !exists(df, 'indices')) {\n            return []\n        }\n        return [this.name]\n    }\n    /**\n     * @hidden\n     */\n    serie(df: DataFrame, itemSize: number, name: string): Serie {\n        if (name !== this.name) {\n            return undefined\n        }\n        const positions = df.series['positions']\n        const indices = df.series['indices']\n        if (!positions || !indices) {\n            return undefined\n        }\n\n        const data = new Array(indices.count).fill(0)\n\n        let i = 0\n        indices.forEach((t) => {\n            const v1 = positions.itemAt(t[0]) as vec.Vector3\n            const v2 = positions.itemAt(t[1]) as vec.Vector3\n            const v3 = positions.itemAt(t[2]) as vec.Vector3\n            const n = vec.cross(\n                vec.create(v1, v2) as vec.Vector3,\n                vec.create(v1, v3) as vec.Vector3,\n            )\n            data[i++] = n[0]\n            data[i++] = n[1]\n            data[i++] = n[2]\n        })\n\n        return Serie.create({\n            array: createTyped(Float32Array, data, true),\n            itemSize: 3,\n        })\n    }\n}\n","import {\n    Serie,\n    createTyped,\n    DataFrame,\n    Decomposer,\n    exists,\n} from '@youwol/dataframe'\n\n/**\n * Get the valence for each node (nb of incident triangles)\n * @category Dataframe/decomposers\n */\nexport class ValenceDecomposer implements Decomposer {\n    constructor(private readonly name: string = 'valence') {}\n    /**\n     * @hidden\n     */\n    names(df: DataFrame, itemSize: number, _serie: Serie, _name: string) {\n        if (itemSize !== 1) {\n            return []\n        }\n        if (!exists(df, 'positions') && !exists(df, 'indices')) {\n            return []\n        }\n        return [this.name]\n    }\n    /**\n     * @hidden\n     */\n    serie(df: DataFrame, itemSize: number, name: string): Serie {\n        if (name !== this.name) {\n            return undefined\n        }\n        const positions = df.series['positions']\n        const indices = df.series['indices']\n        if (!positions || !indices) {\n            return undefined\n        }\n\n        const ids = new Array(positions.count).fill(0)\n        indices.forEach((t) => {\n            ids[t[0]]++\n            ids[t[1]]++\n            ids[t[2]]++\n        })\n\n        return Serie.create({\n            array: createTyped(Int8Array, ids, true),\n            itemSize: 1,\n        }) //.setName(this.name)\n    }\n}\n","import { Serie, DataFrame, Decomposer, exists } from '@youwol/dataframe'\nimport { div, norm } from '..'\nimport { NormalsDecomposer } from './normals'\n\n/**\n * Get the area of the triangles\n * @category Dataframe/decomposers\n */\nexport class AreaDecomposer implements Decomposer {\n    constructor(private readonly name: string = 'area') {}\n    /**\n     * @hidden\n     */\n    names(df: DataFrame, itemSize: number, _serie: Serie, _name: string) {\n        if (itemSize !== 1) {\n            return []\n        }\n        if (!exists(df, 'positions') && !exists(df, 'indices')) {\n            return []\n        }\n        return [this.name]\n    }\n    /**\n     * @hidden\n     */\n    serie(df: DataFrame, itemSize: number, name: string): Serie {\n        if (name !== this.name) {\n            return undefined\n        }\n        const normals = new NormalsDecomposer().serie(df, itemSize, 'normals')\n        if (normals) {\n            return div(norm(normals), 2)\n        } //.setName(this.name)\n        return undefined\n    }\n}\n","import { Serie, DataFrame, Decomposer, apply } from '@youwol/dataframe'\n\n/**\n * Transform a scalar attribute into multiple fringes\n * @category Dataframe/decomposers\n */\nexport class Fringes implements Decomposer {\n    constructor(\n        private readonly name: string,\n        private readonly fringes: number,\n    ) {}\n\n    /**\n     * @hidden\n     */\n    names(df: DataFrame, itemSize: number, _serie: Serie, _name: string) {\n        if (itemSize !== 1) {\n            return []\n        }\n        return [this.name]\n    }\n\n    /**\n     * @hidden\n     */\n    serie(df: DataFrame, itemSize: number, name: string): Serie {\n        if (name !== this.name) {\n            return undefined\n        }\n\n        const u = df.series[this.name]\n        if (!u) {\n            return undefined\n        }\n\n        const frac = (val: number) => val - Math.floor(val)\n        return apply(u, (v) => Math.abs(this.fringes * frac(v / this.fringes)))\n    }\n}\n","const EPS = 0.00001\nconst MAX_ITER = 100\nconst xcpi = Math.cos(Math.PI / 4)\nconst xspi = Math.sin(Math.PI / 4)\n\n/**\n * @param mat The symmetric matrix in a packed array of the form\n * of 6 components [xx, xy, xz, yy, yz, zz] or 9 components\n * [xx, xy, xz, yx, yy, yz, zx, zy, zz]\n * @returns {values, vectors} where values=[v1, v2, v3] and\n * vectors=[v1x, v1y, v1z,  v2x, v2y, v2z,  v3x, v3y, v3z]\n * @note Eigen values and vectors are ordered from the highest to the lowest\n *\n * @category Eigen\n */\nexport function eigen(mat: Array<number>): {\n    values: number[]\n    vectors: number[]\n} {\n    const values: Array<number> = []\n    const vectors: Array<number> = []\n    const a: Array<number> = []\n    const v: Array<number> = []\n    const index: Array<number> = []\n    let nb_iter = 0,\n        thr_nn = 0,\n        jj = 0,\n        k = 0,\n        ik = 0,\n        im = 0,\n        iq = 0,\n        il = 0,\n        a_ij = 0,\n        a_im = 0,\n        a_il = 0,\n        v_ilv = 0,\n        v_imv = 0,\n        x = 0,\n        sinx = 0,\n        cosx = 0\n\n    let n = 0\n    if (mat.length === 3) {\n        n = 2\n        a[0] = mat[0]\n        a[1] = mat[1]\n        a[2] = mat[2]\n    } else if (mat.length === 4) {\n        n = 2\n        a[0] = mat[0]\n        a[1] = mat[1]\n        a[2] = mat[3]\n    } else if (mat.length === 6) {\n        n = 3\n        a[0] = mat[0]\n        a[1] = mat[1]\n        a[2] = mat[3]\n        a[3] = mat[2]\n        a[4] = mat[4]\n        a[5] = mat[5]\n    } else if (mat.length === 9) {\n        n = 3\n        a[0] = mat[0]\n        a[1] = mat[1]\n        a[2] = mat[4]\n        a[3] = mat[2]\n        a[4] = mat[5]\n        a[5] = mat[8]\n    } else {\n        throw new Error(`matrix-array should be of size 2 (xx,xy,yy),\n        4 (xx,xy,yx,yy), 6 (xx,xy,xz,yy,yz,zz) or 9 (xx,xy,xz,yx,yy,yz,zx,zy,zz).\n        Got ${mat.length}`)\n    }\n\n    const nn = (n * (n + 1)) / 2\n    let ij = 0\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            if (i === j) {\n                v[ij++] = 1.0\n            } else {\n                v[ij++] = 0.0\n            }\n        }\n    }\n\n    ij = 1\n    let a_norm = 0.0\n    for (let i = 1; i <= n; ++i) {\n        for (let j = 1; j <= i; ++j) {\n            if (i !== j) {\n                a_ij = a[ij - 1]\n                a_norm += a_ij * a_ij\n            }\n            ++ij\n        }\n    }\n\n    if (a_norm !== 0.0) {\n        const a_normEPS = a_norm * EPS\n        let thr = a_norm\n\n        while (thr > a_normEPS && nb_iter < MAX_ITER) {\n            ++nb_iter\n            thr_nn = thr / nn\n            for (let l = 1; l < n; ++l) {\n                for (let m = l + 1; m <= n; ++m) {\n                    const lq = (l * l - l) / 2\n                    const mq = (m * m - m) / 2\n                    const lm = l + mq\n                    const a_lm = a[lm - 1]\n                    const a_lm_2 = a_lm * a_lm\n\n                    if (a_lm_2 < thr_nn) {\n                        continue\n                    }\n\n                    const ll = l + lq\n                    const mm = m + mq\n                    const a_ll = a[ll - 1]\n                    const a_mm = a[mm - 1]\n                    const delta = a_ll - a_mm\n\n                    if (delta === 0.0) {\n                        x = -Math.PI / 4\n                        sinx = xspi\n                        cosx = xcpi\n                    } else {\n                        x = -Math.atan((a_lm + a_lm) / delta) / 2.0\n                        sinx = Math.sin(x)\n                        cosx = Math.cos(x)\n                    }\n\n                    const sinx_2 = sinx * sinx\n                    const cosx_2 = cosx * cosx\n                    const sincos = sinx * cosx\n                    let ilv = n * (l - 1)\n                    let imv = n * (m - 1)\n\n                    for (let i = 1; i <= n; ++i) {\n                        if (i !== l && i !== m) {\n                            iq = (i * i - i) / 2\n                            if (i < m) {\n                                im = i + mq\n                            } else {\n                                im = m + iq\n                            }\n                            a_im = a[im - 1]\n                            if (i < l) {\n                                il = i + lq\n                            } else {\n                                il = l + iq\n                            }\n                            a_il = a[il - 1]\n                            a[il - 1] = a_il * cosx - a_im * sinx\n                            a[im - 1] = a_il * sinx + a_im * cosx\n                        }\n                        ++ilv\n                        ++imv\n                        v_ilv = v[ilv - 1]\n                        v_imv = v[imv - 1]\n                        v[ilv - 1] = cosx * v_ilv - sinx * v_imv\n                        v[imv - 1] = sinx * v_ilv + cosx * v_imv\n                    }\n\n                    x = a_lm * sincos\n                    x += x\n                    a[ll - 1] = a_ll * cosx_2 + a_mm * sinx_2 - x\n                    a[mm - 1] = a_ll * sinx_2 + a_mm * cosx_2 + x\n                    a[lm - 1] = 0.0\n                    thr = Math.abs(thr - a_lm_2)\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < n; ++i) {\n        k = i + (i * (i + 1)) / 2\n        values[i] = a[k]\n        index[i] = i\n    }\n\n    for (let i = 0; i < n - 1; ++i) {\n        x = values[i]\n        k = i\n        for (let j = i + 1; j < n; ++j) {\n            if (x < values[j]) {\n                k = j\n                x = values[j]\n            }\n        }\n        values[k] = values[i]\n        values[i] = x\n        jj = index[k]\n        index[k] = index[i]\n        index[i] = jj\n    }\n\n    ij = 0\n    for (let k = 0; k < n; ++k) {\n        ik = index[k] * n\n        for (let i = 0; i < n; ++i) {\n            vectors[ij++] = v[ik++]\n        }\n    }\n\n    return { values, vectors }\n}\n\n// ------------------------------------------------------------------\n// For compatibility reason...\n// ------------------------------------------------------------------\n\n// Array of 6 elements\n//      Order is [11, 12, 13, 22, 23, 33]\n// Array of 9 elements\n//      Order is [11, 12, 13, 21, 22, 23, 31, 32, 33]\n// if we consider the matrix\n// | 11 12 13 |\n// | 12 22 23 |\n// | 13 23 33 |\n//\n\n/**\n * Computes the eigen values and eigen vectors of a semi definite symmetric matrix\n * @param {number[]} mat Format: [00, 01, 02, 11, 12, 22]\n * @returns {{number[], Array.<Array.<number>>}} The eigen values and eigen vectors\n * @note Eigen -values and -vectors are ordered from the highest to the lowest\n * @see [[eigen]]\n * @category Eigen\n * @ignore\n */\nexport class Eigen {\n    private eigenValues: Array<number> = []\n    private eigenVectors: Array<number> = []\n\n    constructor() {\n        console.warn('Deprecated class. Use instead eigen(mat: Array<number>')\n    }\n\n    /**\n     * @see eigen()\n     */\n    compute(mat: Array<number>): { values: number[]; vectors: number[] } {\n        const r = eigen(mat)\n        this.eigenValues = r.values\n        this.eigenVectors = r.vectors\n        return r\n    }\n\n    vector(i: number): Array<number> {\n        console.assert(i >= 0 && i < 3)\n        return [\n            this.eigenVectors[3 * i],\n            this.eigenVectors[3 * i + 1],\n            this.eigenVectors[3 * i + 2],\n        ]\n    }\n\n    get vectors(): Array<number> {\n        return this.eigenVectors\n    }\n\n    value(i: number): number {\n        console.assert(i >= 0 && i < 3)\n        return this.eigenValues[i]\n    }\n\n    get values(): Array<number> {\n        return this.eigenValues\n    }\n}\n","import { vec } from './vectors'\n\nconst dot2 = (a: vec.Vector2, b: vec.Vector2): number =>\n    a.reduce((acc, cur, i) => acc + cur * b[i], 0)\nconst dot3 = (a: vec.Vector3, b: vec.Vector3): number =>\n    a.reduce((acc, cur, i) => acc + cur * b[i], 0)\nconst from2 = (a: vec.Vector2, b: vec.Vector2): vec.Vector2 => [\n    b[0] - a[0],\n    b[1] - a[1],\n]\nconst from3 = (a: vec.Vector3, b: vec.Vector3): vec.Vector3 => [\n    b[0] - a[0],\n    b[1] - a[1],\n    b[2] - a[2],\n]\n\n/**\n * @category Barycentric\n */\nexport function barycentric2(\n    p: vec.Vector2,\n    a: vec.Vector2,\n    b: vec.Vector2,\n    c: vec.Vector2,\n): vec.Vector3 {\n    const v0 = from2(a, b)\n    const v1 = from2(a, c)\n    const v3 = from2(a, p)\n    const d00 = dot2(v0, v0)\n    const d01 = dot2(v0, v1)\n    const d11 = dot2(v1, v1)\n    const d20 = dot2(v3, v0)\n    const d21 = dot2(v3, v1)\n    const denom = 1 / (d00 * d11 - d01 * d01)\n    const v = (d11 * d20 - d01 * d21) * denom\n    const w = (d00 * d21 - d01 * d20) * denom\n    const u = 1 - v - w\n    return [u, v, w]\n}\n\n// class vec2 {\n//     static add(a, b) { return [ a[0] + b[0], a[1] + b[1] ] }\n//     static sub(a, b) { return [ a[0] - b[0], a[1] - b[1] ] }\n//     static scale(v, k) { return [ v[0] * k, v[1] * k ] }\n//     static l(v) { return Math.sqrt(v[0]*v[0] + v[1]*v[1]) }\n//     static distance(a, b) {\n//         const dx = b[0] - a[0]\n//         const dy = b[1] - a[1]\n//         return Math.sqrt(dx*dx + dy*dy)\n//     }\n//     static dot(a, b) { return a[0]*b[0] + a[1]*b[1] }\n//     static normalize(v) {\n//         var d = Math.sqrt(v[0]*v[0] + v[1]*v[1])\n//         return d > 0 ? [ v[0] / d, v[1] / d ] : v\n//     }\n//     static area(a, b) { return a[0]*b[1] - b[0]*a[1] }\n//     static angle(a, b) { return Math.acos(vec2.dot(a, b) / (vec2.l(a) * vec2.l(b))) }\n// }\n\n// export function _barycentric2(p: vec.Vector2, a: vec.Vector2, b: vec.Vector2, c: vec.Vector2) {\n//     var v0 = vec2.sub(b, a)\n//     var v1 = vec2.sub(b, a)\n//     var v2 = vec2.sub(p, a)\n//     //console.log(v0, v1, v2)\n//     var d00 = vec2.dot(v0, v0)\n//     var d01 = vec2.dot(v0, v1)\n//     var d11 = vec2.dot(v1, v1)\n//     var d20 = vec2.dot(v2, v0)\n//     var d21 = vec2.dot(v2, v1)\n//     var denom = d00 * d11 - d01 * d01\n//     var v = (d11 * d20 - d01 * d21) / denom\n//     var w = (d00 * d21 - d01 * d20) / denom\n//     var u = 1 - v - w\n//     return [u, v, w]\n// }\n\n/**\n * @category Barycentric\n */\nexport function barycentric3(\n    p: vec.Vector3,\n    a: vec.Vector3,\n    b: vec.Vector3,\n    c: vec.Vector3,\n): vec.Vector3 {\n    const v0 = from3(a, b)\n    const v1 = from3(a, c)\n    const Vector2 = from3(a, p)\n    const d00 = dot3(v0, v0)\n    const d01 = dot3(v0, v1)\n    const d11 = dot3(v1, v1)\n    const d20 = dot3(Vector2, v0)\n    const d21 = dot3(Vector2, v1)\n    const denom = 1 / (d00 * d11 - d01 * d01)\n    const v = (d11 * d20 - d01 * d21) * denom\n    const w = (d00 * d21 - d01 * d20) * denom\n    const u = 1 - v - w\n    return [u, v, w]\n}\n\n// from https://dennis2society.de/painless-tetrahedral-barycentric-mapping\n/**\n * @category Barycentric\n */\nexport function barycentric4(\n    p: vec.Vector3,\n    p0: vec.Vector3,\n    p1: vec.Vector3,\n    p2: vec.Vector3,\n    p3: vec.Vector3,\n): vec.Vector4 {\n    const trans = (p: vec.Vector3): vec.Vector4 => [p[0], p[1], p[2], 1]\n    const v0 = trans(p0)\n    const v1 = trans(p1)\n    const Vector2 = trans(p2)\n    const Vector3 = trans(p3)\n    const P = trans(p)\n    const det0 = determinant4x4(v0, v1, Vector2, Vector3)\n    const det1 = determinant4x4(P, v1, Vector2, Vector3)\n    const det2 = determinant4x4(v0, P, Vector2, Vector3)\n    const det3 = determinant4x4(v0, v1, P, Vector3)\n    const det4 = determinant4x4(v0, v1, Vector2, P)\n    return [det1 / det0, det2 / det0, det3 / det0, det4 / det0]\n}\n\nfunction determinant4x4(\n    v0: vec.Vector4,\n    v1: vec.Vector4,\n    v2: vec.Vector4,\n    v3: vec.Vector4,\n): number {\n    return (\n        v0[3] * v1[2] * v2[1] * v3[0] -\n        v0[2] * v1[3] * v2[1] * v3[0] -\n        v0[3] * v1[1] * v2[2] * v3[0] +\n        v0[1] * v1[3] * v2[2] * v3[0] +\n        v0[2] * v1[1] * v2[3] * v3[0] -\n        v0[1] * v1[2] * v2[3] * v3[0] -\n        v0[3] * v1[2] * v2[0] * v3[1] +\n        v0[2] * v1[3] * v2[0] * v3[1] +\n        v0[3] * v1[0] * v2[2] * v3[1] -\n        v0[0] * v1[3] * v2[2] * v3[1] -\n        v0[2] * v1[0] * v2[3] * v3[1] +\n        v0[0] * v1[2] * v2[3] * v3[1] +\n        v0[3] * v1[1] * v2[0] * v3[2] -\n        v0[1] * v1[3] * v2[0] * v3[2] -\n        v0[3] * v1[0] * v2[1] * v3[2] +\n        v0[0] * v1[3] * v2[1] * v3[2] +\n        v0[1] * v1[0] * v2[3] * v3[2] -\n        v0[0] * v1[1] * v2[3] * v3[2] -\n        v0[2] * v1[1] * v2[0] * v3[3] +\n        v0[1] * v1[2] * v2[0] * v3[3] +\n        v0[2] * v1[0] * v2[1] * v3[3] -\n        v0[0] * v1[2] * v2[1] * v3[3] -\n        v0[1] * v1[0] * v2[2] * v3[3] +\n        v0[0] * v1[1] * v2[2] * v3[3]\n    )\n}\n","import { IArray } from '@youwol/dataframe'\n// interface IArray {\n//     [i: number]: number\n//     length: number\n//     map(cb: Function): IArray\n//     filter(cb: Function): IArray\n// }\n\n/**\n * @category Array\n */\nexport function minArray(array: IArray): number {\n    let m = Number.POSITIVE_INFINITY\n    const n = array.length\n    for (let i = 0; i < n; ++i) {\n        const a = array[i]\n        if (a < m) {\n            m = a\n        }\n    }\n    return m\n}\n\n/**\n * @category Array\n */\nexport function maxArray(array: IArray): number {\n    let m = Number.NEGATIVE_INFINITY\n    const n = array.length\n    for (let i = 0; i < n; ++i) {\n        const a = array[i]\n        if (a > m) {\n            m = a\n        }\n    }\n    return m\n}\n\n/**\n * @category Array\n */\nexport function minMaxArray(array: IArray): Array<number> {\n    let m = Number.POSITIVE_INFINITY\n    let M = Number.NEGATIVE_INFINITY\n    const n = array.length\n    for (let i = 0; i < n; ++i) {\n        const a = array[i]\n        if (a < m) {\n            m = a\n        }\n        if (a > M) {\n            M = a\n        }\n    }\n    return [m, M]\n}\n\n/**\n * @category Array\n */\nexport function normalizeArray(array: IArray): IArray {\n    const m = minMaxArray(array)\n    return array.map((v) => (v - m[0]) / (m[1] - m[0]))\n}\n\n/**\n * @category Array\n */\nexport function scaleArray(array: IArray, s: number): IArray {\n    return array.map((v) => v * s)\n}\n\n/**\n *  Return the indices from array that contain NaN values\n * @param array The array of number\n * @category Array\n */\nexport function dectectNan(array: IArray): IArray {\n    const values = array.map((value, i) => {\n        return { value, i }\n    })\n    const idx = values.filter((a) => Number.isNaN(a.value))\n    return idx.map((v) => v.i)\n}\n\n/**\n * @category Array\n */\nexport function flatten(array: Array<Array<number>>): Array<number> {\n    const r: Array<number> = []\n    array.forEach((a) => r.push(...a))\n    return r\n}\n","import { barycentric2, barycentric3, barycentric4 } from './barycentric'\nimport { minMaxArray, scaleArray } from './arrays'\n\ntype V2 = [number, number]\ntype V3 = [number, number, number]\n\n/**\n *\n * @param x Where to evaluate\n * @param x1 min point\n * @param x2 max point\n * @param q00 scalar value at x1\n * @param q01 scalar value at x2\n * @category Interpolation\n */\nexport function lerp(\n    x: number,\n    x1: number,\n    x2: number,\n    q00: number,\n    q01: number,\n) {\n    const d = 1 / (x2 - x1)\n    return q00 * (x2 - x) * d + q01 * (x - x1) * d\n}\n\n/**\n * Bilinear interpolation\n * @param p Where to evaluate\n * @param p1 min point\n * @param p2 max point\n * @param q11 scalar value at (x1, y1)\n * @param q12 scalar value at (x1, y2)\n * @param q21 scalar value at (x2, y1)\n * @param q22 scalar value at (x2, y2)\n * @category Interpolation\n */\nexport function biLerp(\n    p: V2,\n    p1: V2,\n    p2: V2,\n    q11: number,\n    q12: number,\n    q21: number,\n    q22: number,\n) {\n    const r1 = lerp(p[0], p1[0], p2[0], q11, q21)\n    const r2 = lerp(p[0], p1[0], p2[0], q12, q22)\n    return lerp(p[1], p1[1], p2[1], r1, r2)\n}\n\n/**\n * Trilinear interpolation\n * @param p Where to evaluate\n * @param p1 min point\n * @param p2 max point\n * @param q000 scalar value at (0,0,0)\n * @param q001 scalar value at (0,0,1)\n * @param q010 scalar value at (0,1,0)\n * @param q011 scalar value at (0,1,1)\n * @param q100 scalar value at (1,0,0)\n * @param q101 scalar value at (1,0,1)\n * @param q110 scalar value at (1,1,0)\n * @param q111 scalar value at (1,1,1)\n * @category Interpolation\n */\nexport function triLerp(\n    p: V3,\n    p1: V3,\n    p2: V3,\n    q000: number,\n    q001: number,\n    q010: number,\n    q011: number,\n    q100: number,\n    q101: number,\n    q110: number,\n    q111: number,\n) {\n    const x00 = lerp(p[0], p1[0], p2[0], q000, q100)\n    const x10 = lerp(p[0], p1[0], p2[0], q010, q110)\n    const x01 = lerp(p[0], p1[0], p2[0], q001, q101)\n    const x11 = lerp(p[0], p1[0], p2[0], q011, q111)\n    const r0 = lerp(p[1], p1[1], p2[1], x00, x01)\n    const r1 = lerp(p[1], p1[1], p2[1], x10, x11)\n    return lerp(p[2], p1[2], p2[2], r0, r1)\n}\n\n/**\n * @param q1 Either a number or an array of size 3, 6 or 9 defined at point p1\n * @param q2 Either a number or an array of size 3, 6 or 9 defined at point p2\n * @param q3 Either a number or an array of size 3, 6 or 9 defined at point p3\n * @category Interpolation\n */\nexport function triangleLerp2D(\n    p: V2,\n    p1: V2,\n    p2: V2,\n    p3: V2,\n    q1: number | number[],\n    q2: number | number[],\n    q3: number | number[],\n): number | number[] {\n    const uvw = barycentric2(p, p1, p2, p3)\n    if (Array.isArray(q1)) {\n        return q1.map((v1, i) => v1 * uvw[0] + q2[i] * uvw[1] + q3[i] * uvw[2])\n    }\n\n    const qq2 = q2 as number\n    const qq3 = q3 as number\n    return uvw[0] * q1 + uvw[1] * qq2 + uvw[2] * qq3\n}\n\n/**\n * @param q1 Either a number or an array of size 3, 6 or 9 defined at point p1\n * @param q2 Either a number or an array of size 3, 6 or 9 defined at point p2\n * @param q3 Either a number or an array of size 3, 6 or 9 defined at point p3\n * @category Interpolation\n */\nexport function triangleLerp3D(\n    p: V3,\n    p1: V3,\n    p2: V3,\n    p3: V3,\n    q1: number | number[],\n    q2: number | number[],\n    q3: number | number[],\n): number | number[] {\n    const uvw = barycentric3(p, p1, p2, p3)\n    if (Array.isArray(q1)) {\n        return q1.map((v1, i) => v1 * uvw[0] + q2[i] * uvw[1] + q3[i] * uvw[2])\n    }\n\n    const qq2 = q2 as number\n    const qq3 = q3 as number\n    return uvw[0] * q1 + uvw[1] * qq2 + uvw[2] * qq3\n}\n\n/**\n * @param q1 Either a number or an array of size 3, 6 or 9 defined at point p1\n * @param q2 Either a number or an array of size 3, 6 or 9 defined at point p2\n * @param q3 Either a number or an array of size 3, 6 or 9 defined at point p3\n * @param q4 Either a number or an array of size 3, 6 or 9 defined at point p4\n * @category Interpolation\n */\nexport function tetraLerp(\n    p: V3,\n    p1: V3,\n    p2: V3,\n    p3: V3,\n    p4: V3,\n    q1: number | number[],\n    q2: number | number[],\n    q3: number | number[],\n    q4: number | number[],\n): number | number[] {\n    const uvw = barycentric4(p, p1, p2, p3, p4)\n    if (Array.isArray(q1)) {\n        return q1.map(\n            (v1, i) =>\n                v1 * uvw[0] + q2[i] * uvw[1] + q3[i] * uvw[2] + q4[i] * uvw[3],\n        )\n    }\n\n    const qq2 = q2 as number\n    const qq3 = q3 as number\n    const qq4 = q4 as number\n    return uvw[0] * q1 + uvw[1] * qq2 + uvw[2] * qq3 + uvw[3] * qq4\n}\n\n// -------------------------------------------------------------------------\n// INTERPOLATION multiple values using Topological information on a mesh\n// -------------------------------------------------------------------------\n\n/**\n * The direction for function [[meshInterpolate]]\n * @category Interpolation\n */\nexport enum InterpolateDirection {\n    INCREASING,\n    DECREASING,\n}\n\n/**\n * Convert an attribute defined at combel of dim A to\n * a new attribute defined at a combel of dim B using a topological relationship.\n * If A<B, the direction is INCREASING (A -> B).\n *\n * A combel made of 1 vertex (also called node) is of dim 0 (0-dimensional space).\n *\n * A combel made of 2 connected vertices is a segment and is of dim 1 (1-dimensional space or line).\n *\n * A combel made of 3 or more connected planar vertices (convex polygon) is of dim 2 (2-dimensional space or surface).\n *\n * A combel made of 4 or more non-planar connected vertices is a tetrahedron and is of dim 3 (3-dimensional space or voluime).\n *\n * @param attribute The starting attribute (combel A). An attribute can be an array of number or\n * an array of array of number (). For example:\n * <ul>\n * <li> scalar  : [0, 0, 0 ...]\n * <li> vector2 : [[0,0], [0,0] ...]\n * <li> vector3 : [[0,0,0], [0,0,0] ...]\n * <li> smatrix3: [[0,0,0,0,0,0], [0,0,0,0,0,0] ...] symetric 3x3 matrices\n * <li> matrix3 : [[0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0] ...] full 3x3 matrices\n * <li> Any Array<Array<number>>\n * </ul>\n * The return attribute is noted combel B.\n * @param topology The topological relationship bitween the underlaying combels A and B.\n * Topology is given as an array of arrays or an array of number (example: [[0,1,2], [0,2,6], [10,34], [1,8,9,4]...]).\n * For the later (array of number) you can provide the chunk size (default 3 for 3 nodes therefore for triangles)\n * of the combels.\n * @param size The chunk size of topology if an array of number is provided. Default value is 3\n * @param direction The direction of the interpolation. INCREASING direction means from combels\n * of lower to higher degree (e.g., from vertex to triangle or to segment or to tetrahedron or to ...).\n * DECREASING direction means from combels of higher to lower degree (e.g., from triangle to vertex).\n * Default value is INCREASING direction\n * @returns The new interpolated attribute for the underlaying combels defined in topology\n * @note We only interpolate from combel of dim 0 (vertex) to dim N, and from dim N to dim 0,\n * never from dim N to dim M.\n * @example\n * ```js\n * // interpolate node attributes to 2 triangles and 1 segment\n * // The first triangle is made of nodes index 0, 2 and 1\n * // The second triangle is made of nodes index 0, 3 and 2\n * // The segment is made of nodes index 2 and 3\n * const nodes    = [1.2, 5.9, 4.2, 7.2]\n * const topology = [[0,2,1], [0,3,2], [2,3]] // 2 triangles and 1 segment\n * const result   = interpolate({attribute: nodes, topology, direction: Direction.INCREASING})\n * // Return the value for the first and second triangle and the segment\n * // Expected return values [3.7666, 4.2, 6.2]\n * //   3.7666 = (1.2 + 4.2 + 5.9) / 3\n * //   4.2    = (1.2 + 7.2 + 4.2) / 3\n * //   6.2    = (4.2 + 7.2) / 2\n * ```\n * @category Interpolation\n */\nexport function meshInterpolate({\n    attribute,\n    topology,\n    size = 3,\n    direction = InterpolateDirection.INCREASING,\n}: {\n    attribute: Array<number | number[]>\n    topology: Array<number | number[]>\n    size?: number\n    direction?: InterpolateDirection\n}): Array<number | number[]> {\n    let topo = undefined\n    if (attribute === undefined) {\n        console.warn('Cannot meshInterpolate, attribute is undefined')\n        return undefined\n    }\n    if (attribute.length === 0) {\n        console.warn('Cannot meshInterpolate, attribute is empty')\n        return undefined\n    }\n    if (topology === undefined) {\n        console.warn('Cannot meshInterpolate, attribute is topology')\n        return undefined\n    }\n    if (topology.length === 0) {\n        console.warn('Cannot meshInterpolate, topology is empty')\n        return undefined\n    }\n\n    if (!Array.isArray(topology[0])) {\n        // Humm, better to use [[], []...]\n        // Have to use size to know the chunk size in topology\n        topo = []\n        if (topology.length % size !== 0) {\n            throw new Error(\n                `Cannot meshInterpolate, topology (of size ${topology.length}) is not divisable by ${size}`,\n            )\n        }\n        for (let i = 0; i < topology.length; i += size) {\n            const a: Array<number> = []\n            for (let j = 0; j < size; ++j) {\n                a.push(topology[i + j] as number)\n            }\n            topo.push(a)\n        }\n    } else {\n        topo = topology\n    }\n\n    switch (direction) {\n        case InterpolateDirection.INCREASING:\n            return interpolateIncreasingCombels({\n                from: attribute,\n                topology: topo,\n            })\n        case InterpolateDirection.DECREASING:\n            return interpolateDecreasingCombels({\n                from: attribute,\n                topology: topo,\n            })\n    }\n}\n\n// P R I V A T E  starting from here\n\nfunction getMinMax(topology: Array<Array<number>>) {\n    const minMax = [Infinity, -Infinity]\n    topology.forEach((combel) => {\n        const m = minMaxArray(combel)\n        minMax[0] = Math.min(minMax[0], m[0])\n        minMax[1] = Math.max(minMax[1], m[1])\n    })\n    return minMax\n}\n\nfunction interpolateIncreasingCombels({\n    from,\n    topology,\n}: {\n    from: Array<number | number[]>\n    topology: Array<Array<number>>\n}): Array<number | number[]> {\n    const minMax = getMinMax(topology)\n    if (minMax[0] < 0) {\n        throw new Error(`Topology contains negatif indices`)\n    }\n\n    let a = from[0]\n    if (Array.isArray(a)) {\n        a = a.slice().fill(0)\n    } else {\n        a = 0\n    }\n\n    const to = new Array(topology.length).fill(a)\n\n    if (typeof a === 'number') {\n        topology.forEach((combel, index) => {\n            to[index] =\n                combel.reduce((v, i) => {\n                    const vv = from[i] as number\n                    return v + vv\n                }) / combel.length\n        })\n    } else {\n        topology.forEach((combel, index) => {\n            const aa = a as number[]\n            let sum = aa.slice()\n            combel.forEach((index) => {\n                const b = from[index]\n                sum = sum.map((num: number, idx: number) => num + b[idx])\n            })\n            to[index] = scaleArray(sum, 1 / combel.length)\n        })\n    }\n\n    return to\n}\n\nfunction interpolateDecreasingCombels({\n    from,\n    topology,\n}: {\n    from: Array<number | number[]>\n    topology: Array<Array<number>>\n}): Array<number | number[]> {\n    const minMax = getMinMax(topology)\n\n    //const minMax = topology.reduce( combel => minMaxArray(combel) )\n    if (minMax[0] < 0) {\n        throw new Error(`Topology contains negatif indices`)\n    }\n\n    let a = from[0]\n    let size = 1\n    let to: Array<number | number[]> = undefined\n    if (Array.isArray(a)) {\n        a = a.slice().fill(0)\n        size = a.length\n        to = new Array(minMax[1] + 1).fill(undefined).map((_) => {\n            const aa = a as number[]\n            return aa.slice()\n        })\n    } else {\n        a = 0\n        to = new Array(minMax[1] + 1).fill(0)\n    }\n\n    const nbr = new Array(to.length).fill(0)\n\n    if (!Array.isArray(a)) {\n        const too = to as number[]\n        topology.forEach((idNodes, idFace) => {\n            const v = from[idFace] as number\n            idNodes.forEach((id) => {\n                too[id] += v\n                nbr[id]++\n            })\n        })\n        for (let i = 0; i < to.length; ++i) {\n            too[i] /= nbr[i]\n        }\n    } else {\n        topology.forEach((idNodes, idFace) => {\n            const v = from[idFace]\n            idNodes.forEach((id) => {\n                const vv = to[id]\n                for (let i = 0; i < size; ++i) {\n                    vv[i] += v[i]\n                }\n                nbr[id]++\n            })\n        })\n        for (let j = 0; j < to.length; ++j) {\n            for (let i = 0; i < size; ++i) {\n                to[j][i] /= nbr[j]\n            }\n        }\n    }\n\n    return to\n}\n","export namespace vec {\n    export interface IVector {\n        [i: number]: number\n        reduce(\n            cb: (acc: number, cur: number, index?: number) => number,\n            init: number,\n        ): number\n        map(cb: (v: number, index: number) => number): IVector\n        forEach(cb: (v: number, index: number) => void): void\n        [Symbol.iterator]()\n        readonly length: number\n    }\n\n    /**\n     * @category Vector\n     */\n    export type Vector2 = [number, number]\n\n    /**\n     * @category Vector\n     */\n    export type Vector3 = [number, number, number]\n\n    /**\n     * @category Vector\n     */\n    export type Vector4 = [number, number, number, number]\n\n    /**\n     * @category Vector\n     */\n    export type Vector6 = [number, number, number, number, number, number]\n\n    /**\n     * @category Vector\n     */\n    export type Vector9 = [\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n    ]\n\n    /**\n     * @category Vector\n     */\n    export const create = (v1: IVector, v2: IVector) =>\n        v2.map((v, i) => v - v1[i])\n\n    /**\n     * @category Vector\n     */\n    export const norm2 = (v: IVector) => v.reduce((acc, w) => acc + w ** 2, 0)\n\n    /**\n     * @category Vector\n     */\n    export const norm = (v: IVector) => Math.sqrt(norm2(v))\n\n    /**\n     * Perform (a+b)\n     * @category Vector\n     */\n    export const add = (a: IVector, b: IVector): IVector =>\n        a.map((v, i) => v + b[i])\n\n    /**\n     * Perform (a-b)\n     * @category Vector\n     */\n    export const sub = (a: IVector, b: IVector): IVector =>\n        a.map((v, i) => v - b[i])\n\n    /**\n     * @category Vector\n     */\n    export const scale = (v: IVector, s: number) => v.map((w) => w * s)\n\n    /**\n     * @category Vector\n     */\n    export const setCoord = (v: IVector, i: number, value: number) =>\n        (v[i] = value)\n\n    /**\n     * @category Vector\n     */\n    export const set = (v: IVector, v1: IVector) =>\n        v1.forEach((value, i) => (v[i] = v1[i]))\n\n    /**\n     * @category Vector\n     */\n    export const dot = (a: IVector, b: IVector): number =>\n        a.reduce((acc, cur, i) => acc + cur * b[i], 0)\n\n    /**\n     * @category Vector\n     */\n    export const cross = (v: Vector3, w: Vector3): Vector3 => {\n        const x = v[1] * w[2] - v[2] * w[1]\n        const y = v[2] * w[0] - v[0] * w[2]\n        const z = v[0] * w[1] - v[1] * w[0]\n        return [x, y, z]\n    }\n\n    /**\n     * @category Vector\n     */\n    export const normalize = (v: IVector): IVector => {\n        const n = norm(v)\n        return v.map((w) => w / n)\n        //return [v[0]/n, v[1]/n, v[2]/n]\n    }\n\n    export const clone = (v: IVector): IVector => [...v]\n}\n","/**\n * @example\n * ```ts\n * const array = [1,6,3,2,8,9,5]\n * const mm = new MinMax(array)\n * console.log( mm.min ) // 1\n * console.log( mm.max ) // 9\n *\n * mm.reset()\n * mm.add([7,2,0,6])\n * mm.add(8)\n * console.log( mm.min ) // 0\n * console.log( mm.max ) // 8\n * ```\n */\nexport class MinMax {\n    private m_ = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY]\n\n    constructor(values?: number | number[]) {\n        if (values !== undefined) {\n            this.add(values)\n        }\n    }\n\n    reset() {\n        this.m_ = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY]\n    }\n\n    get min() {\n        return this.m_[0]\n    }\n    get max() {\n        return this.m_[1]\n    }\n\n    get length() {\n        return this.m_[1] - this.m_[0]\n    }\n\n    get value() {\n        return this.m_\n    }\n\n    /**\n     * Normalize a value (lerp) according to the min/max of this\n     */\n    normalize(v: number): number {\n        return (v - this.min) / (this.max - this.min)\n    }\n\n    add(values: number | number[]) {\n        if (Array.isArray(values)) {\n            values.forEach((v: number) => {\n                if (v < this.m_[0]) {\n                    this.m_[0] = v\n                }\n                if (v > this.m_[1]) {\n                    this.m_[1] = v\n                }\n            })\n        } else {\n            const v = values\n            if (v < this.m_[0]) {\n                this.m_[0] = v\n            }\n            if (v > this.m_[1]) {\n                this.m_[1] = v\n            }\n        }\n        return this\n    }\n}\n","import { mat } from './matrix3'\nimport { vec } from './vectors'\n\nconst setRow = (m: mat.Matrix3, i: number, v: vec.Vector3) => {\n    m[i][0] = v[0]\n    m[i][1] = v[1]\n    m[i][2] = v[2]\n}\n\nexport class Quaternion {\n    private q: Array<number> = [0, 0, 0, 1]\n\n    /**\n     *\n     * @param {Vector3} axis Axis of ratation\n     * @param {number} angle Angle of rotation in radian\n     */\n    static fromAxisAngle(axis: vec.Vector3, angle: number) {\n        const q = new Quaternion()\n        q.setAxisAngle(axis, angle)\n        return q\n    }\n\n    // prod 2 quaternions\n    static fromProd(a: Quaternion, b: Quaternion) {\n        const q = new Quaternion()\n        q.q[0] =\n            a.q[3] * b.q[0] +\n            b.q[3] * a.q[0] +\n            a.q[1] * b.q[2] -\n            a.q[2] * b.q[1]\n        q.q[1] =\n            a.q[3] * b.q[1] +\n            b.q[3] * a.q[1] +\n            a.q[2] * b.q[0] -\n            a.q[0] * b.q[2]\n        q.q[2] =\n            a.q[3] * b.q[2] +\n            b.q[3] * a.q[2] +\n            a.q[0] * b.q[1] -\n            a.q[1] * b.q[0]\n        q.q[3] =\n            a.q[3] * b.q[3] -\n            b.q[0] * a.q[0] -\n            a.q[1] * b.q[1] -\n            a.q[2] * b.q[2]\n        return q\n    }\n\n    // 3 Vec3\n    static fromBase(X: vec.Vector3, Y: vec.Vector3, Z: vec.Vector3) {\n        const q = new Quaternion()\n        q.setFromBase(X, Y, Z)\n        return q\n    }\n\n    // Mat3\n    static fromRotationMatrix(r: mat.Matrix3) {\n        const q = new Quaternion()\n        q.setFromRotationMatrix(r)\n        return q\n    }\n\n    // 2 Vec3\n    static fromTo(from: vec.Vector3, to: vec.Vector3) {\n        const q = new Quaternion()\n        q.setFromTo(from, to)\n        return q\n    }\n\n    // ------------------------------------\n\n    get data() {\n        return this.q\n    }\n\n    get axis(): vec.Vector3 {\n        const res = [this.q[0], this.q[1], this.q[2]] as vec.Vector3\n        const sinus = vec.norm(res)\n        if (sinus > 1e-8) {\n            vec.scale(res, 1 / sinus)\n        }\n        return Math.acos(this.q[3]) <= Math.PI / 2.0\n            ? res\n            : (vec.scale(res, -1) as vec.Vector3)\n    }\n\n    get angle() {\n        const angle = 2.0 * Math.acos(this.q[3])\n        return angle <= Math.PI ? angle : 2.0 * Math.PI - angle\n    }\n\n    // ------------------------------------\n\n    equals(q: Quaternion) {\n        for (let i = 0; i < 4; ++i) {\n            if (this.q[i] !== q.q[i]) {\n                return false\n            }\n        }\n        return true\n    }\n\n    notEquals(q: Quaternion) {\n        return !this.equals(q)\n    }\n\n    prod(q: Quaternion) {\n        const r = Quaternion.fromProd(this, q)\n        return this.setFrom(r)\n    }\n\n    inverse() {\n        const q = new Quaternion()\n        for (let i = 0; i < 3; ++i) {\n            q.q[i] = -this.q[i]\n        }\n        q.q[3] = this.q[3]\n        return q\n    }\n\n    invert() {\n        this.q[0] *= -1\n        this.q[1] *= -1\n        this.q[2] *= -1\n        return this\n    }\n\n    negate() {\n        this.invert()\n        this.q[3] *= -1\n        return this\n    }\n\n    normalize() {\n        const q = this.q\n        const norm = Math.sqrt(\n            q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3],\n        )\n        for (let i = 0; i < 4; ++i) {\n            q[i] /= norm\n        }\n        return norm\n    }\n\n    // 2 quaternions\n    dot(A: Quaternion, B: Quaternion) {\n        const a = A.q\n        const b = B.q\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3]\n    }\n\n    /**\n     * Rorate inverse a vector\n     * @param {Vec3} V The vector to inverse rotate\n     * @returns {Vec3} The rotated vector\n     */\n    iRotate(v: vec.Vector3) {\n        const q = this.q\n        const q00 = 2.0 * q[0] * q[0]\n        const q11 = 2.0 * q[1] * q[1]\n        const q22 = 2.0 * q[2] * q[2]\n        const q01 = 2.0 * q[0] * q[1]\n        const q02 = 2.0 * q[0] * q[2]\n        const q03 = 2.0 * q[0] * q[3]\n        const q12 = 2.0 * q[1] * q[2]\n        const q13 = 2.0 * q[1] * q[3]\n        const q23 = 2.0 * q[2] * q[3]\n        //const v = [V.x, V.y, V.z]\n        return [\n            (1.0 - q11 - q22) * v[0] + (q01 + q23) * v[1] + (q02 - q13) * v[2],\n            (q01 - q23) * v[0] + (1.0 - q22 - q00) * v[1] + (q12 + q03) * v[2],\n            (q02 + q13) * v[0] + (q12 - q03) * v[1] + (1.0 - q11 - q00) * v[2],\n        ] as vec.Vector3\n    }\n\n    /**\n     * Rotate a vector\n     * @param {Vec3} v The vector to rotate\n     * @returns {Vec3} The rotated vector\n     */\n    rotate(v: vec.Vector3) {\n        const q = this.q\n        const q00 = 2.0 * q[0] * q[0]\n        const q11 = 2.0 * q[1] * q[1]\n        const q22 = 2.0 * q[2] * q[2]\n        const q01 = 2.0 * q[0] * q[1]\n        const q02 = 2.0 * q[0] * q[2]\n        const q03 = 2.0 * q[0] * q[3]\n        const q12 = 2.0 * q[1] * q[2]\n        const q13 = 2.0 * q[1] * q[3]\n        const q23 = 2.0 * q[2] * q[3]\n        //const v = [V.x, V.y, V.z]\n        return [\n            (1.0 - q11 - q22) * v[0] + (q01 - q23) * v[1] + (q02 + q13) * v[2],\n            (q01 + q23) * v[0] + (1.0 - q22 - q00) * v[1] + (q12 - q03) * v[2],\n            (q02 - q13) * v[0] + (q12 + q03) * v[1] + (1.0 - q11 - q00) * v[2],\n        ]\n    }\n\n    // --------------------------------------------\n\n    /**\n     * @return [xx,xy,xz,yy,yz,zz] the rotation matrix (symm) (?? should be antisym)\n     */\n    toMatrix(): mat.Matrix3 {\n        this.normalize()\n        const q = this.q\n\n        const M = [\n            [0, 0, 0],\n            [0, 0, 0],\n            [0, 0, 0],\n        ] as mat.Matrix3\n\n        // M[0] = 1 - 2 * q[1] ** 2 - 2 * q[2] ** 2\n        // M[1] = 2 * q[0] * q[1] - 2 * q[2] * q[3]\n        // M[2] = 2 * q[0] * q[2] + 2 * q[1] * q[3]\n        // M[3] = 1 - 2 * q[0] ** 2 - 2 * q[2] ** 2\n        // M[4] = 2 * q[1] * q[2] - 2 * q[0] * q[3]\n        // M[5] = 1 - 2 * q[0] ** 2 - 2 * q[1] ** 2\n        // return M\n\n        const q0 = q[0]\n        const q1 = q[1]\n        const q2 = q[2]\n        const q3 = q[3]\n\n        // First row of the rotation matrix\n        M[0][0] = 2 * (q0 * q0 + q1 * q1) - 1\n        M[0][1] = 2 * (q1 * q2 - q0 * q3)\n        M[0][2] = 2 * (q1 * q3 + q0 * q2)\n\n        // Second row of the rotation matrix\n        M[1][0] = 2 * (q1 * q2 + q0 * q3)\n        M[1][1] = 2 * (q0 * q0 + q2 * q2) - 1\n        M[1][2] = 2 * (q2 * q3 - q0 * q1)\n\n        // Third row of the rotation matrix\n        M[2][0] = 2 * (q1 * q3 - q0 * q2)\n        M[2][1] = 2 * (q2 * q3 + q0 * q1)\n        M[2][2] = 2 * (q0 * q0 + q3 * q3) - 1\n\n        return M\n    }\n\n    setFrom(q: Quaternion) {\n        for (let i = 0; i < 4; ++i) {\n            this.q[i] = q.q[i]\n        }\n        return this\n    }\n\n    /**\n     *\n     * @param {Vec3} v The axis of rotation\n     * @param {Number} angle\n     */\n    setAxisAngle(v: vec.Vector3, angle: number) {\n        const nor = vec.norm(v)\n\n        if (nor < 1e-9) {\n            this.q[0] = 0.0\n            this.q[1] = 0.0\n            this.q[2] = 0.0\n            this.q[3] = 1.0\n        } else {\n            const sha = Math.sin(angle / 2.0)\n            this.q[0] = (sha * v[0]) / nor\n            this.q[1] = (sha * v[1]) / nor\n            this.q[2] = (sha * v[2]) / nor\n            this.q[3] = Math.cos(angle / 2.0)\n        }\n        return this\n    }\n\n    setFromTo(from: vec.Vector3, to: vec.Vector3) {\n        const epsilon = 1e-10\n        const fromSqNorm = vec.norm2(from)\n        const toSqNorm = vec.norm2(to)\n        const axis = vec.cross(from, to)\n        const axisSqNorm = vec.norm2(axis)\n        const q = this.q\n        const test = vec.dot(from, to) / Math.sqrt(fromSqNorm * toSqNorm)\n        if (test < 0 && 1 - Math.abs(test) < epsilon) {\n            q[0] = q[1] = q[2] = 0.0\n            q[3] = 1.0\n            return this\n        }\n\n        if (\n            fromSqNorm < epsilon ||\n            toSqNorm < epsilon ||\n            axisSqNorm < epsilon\n        ) {\n            q[0] = q[1] = q[2] = 0.0\n            q[3] = 1.0\n        } else {\n            let angle = Math.asin(Math.sqrt(axisSqNorm / fromSqNorm / toSqNorm))\n            if (vec.dot(from, to) < 0.0) {\n                angle = Math.PI - angle\n            }\n            this.setAxisAngle(axis, angle)\n        }\n        return this\n    }\n\n    /**\n     *\n     * @param {Mat3} r The roration matrix\n     */\n    setFromRotationMatrix(m: mat.Matrix3) {\n        //const m = r.data\n        let i = 2\n        if (m[0][0] > m[1][1]) {\n            if (m[0][0] > m[2][2]) {\n                i = 0\n            }\n        } else {\n            if (m[1][1] > m[2][2]) {\n                i = 1\n            }\n        }\n        if (m[0][0] + m[1][1] + m[2][2] > m[i][i]) {\n            this.q[3] = Math.sqrt(m[0][0] + m[1][1] + m[2][2] + 1.0) / 2.0\n            this.q[0] = (m[2][1] - m[1][2]) / (4.0 * this.q[3])\n            this.q[1] = (m[0][2] - m[2][0]) / (4.0 * this.q[3])\n            this.q[2] = (m[1][0] - m[0][1]) / (4.0 * this.q[3])\n        } else {\n            const j = (i + 1) % 3\n            const k = (i + 2) % 3\n            this.q[i] = Math.sqrt(m[i][i] - m[j][j] - m[k][k] + 1.0) / 2.0\n            this.q[j] = (m[i][j] + m[j][i]) / (4.0 * this.q[i])\n            this.q[k] = (m[i][k] + m[k][i]) / (4.0 * this.q[i])\n            this.q[3] = (m[k][j] - m[j][k]) / (4.0 * this.q[i])\n        }\n        return this\n    }\n\n    setFromBase(X: vec.Vector3, Y: vec.Vector3, Z: vec.Vector3) {\n        const m = [\n            [0, 0, 0],\n            [0, 0, 0],\n            [0, 0, 0],\n        ] as mat.Matrix3\n        const normX = vec.norm(X)\n        const normY = vec.norm(Y)\n        const normZ = vec.norm(Z)\n\n        for (let i = 0; i < 3; ++i) {\n            setRow(m, i, [X[i] / normX, Y[i] / normY, Z[i] / normZ])\n        }\n        return this.setFromRotationMatrix(m)\n    }\n}\n","import { mat, Quaternion } from '.'\nimport { vec } from './vectors'\n\n/**\n * Rotate a vector\n * @param axis The axis of rotation\n * @param angle The angle of rotation\n * @param v The vector to rotate\n * @returns The rotated vector (new instance)\n */\nexport function rotateAxis(axis: vec.Vector3, angle: number, v: vec.Vector3) {\n    const nor = vec.norm(axis)\n    const q = [0, 0, 0, 1]\n    if (nor > 1e-9) {\n        const sha = Math.sin(angle * 0.5) / nor\n        q[0] = sha * axis[0]\n        q[1] = sha * axis[1]\n        q[2] = sha * axis[2]\n        q[3] = Math.cos(angle * 0.5)\n    }\n    const q00 = 2.0 * q[0] ** 2\n    const q11 = 2.0 * q[1] ** 2\n    const q22 = 2.0 * q[2] ** 2\n    const q01 = 2.0 * q[0] * q[1]\n    const q02 = 2.0 * q[0] * q[2]\n    const q03 = 2.0 * q[0] * q[3]\n    const q12 = 2.0 * q[1] * q[2]\n    const q13 = 2.0 * q[1] * q[3]\n    const q23 = 2.0 * q[2] * q[3]\n    return [\n        (1.0 - q11 - q22) * v[0] + (q01 - q23) * v[1] + (q02 + q13) * v[2],\n        (q01 + q23) * v[0] + (1.0 - q22 - q00) * v[1] + (q12 - q03) * v[2],\n        (q02 - q13) * v[0] + (q12 + q03) * v[1] + (1.0 - q11 - q00) * v[2],\n    ]\n}\n\n/**\n * Get a 3D rotation matrix given an axis and an angle in degrees.\n * Axis can be either a vec.Vector3 or a string ('x', 'X', 'y', 'Y', 'z' or 'Z')\n * @param axis\n * @param angleInDeg\n * @returns [[mat.Matrix3]]\n */\nexport function getRotationAxis(\n    axis: vec.Vector3 | string,\n    angleInDeg: number,\n): mat.Matrix3 {\n    if (Array.isArray(axis)) {\n        return Quaternion.fromAxisAngle(axis, angleInDeg).toMatrix()\n    }\n\n    let AXIS = 2\n    if (axis === 'x' || axis === 'X') {\n        AXIS = 0\n    } else if (axis === 'y' || axis === 'Y') {\n        AXIS = 1\n    }\n\n    const R = [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0],\n    ] as mat.Matrix3\n\n    const c = Math.cos((angleInDeg * Math.PI) / 180.0)\n    const s = Math.sin((angleInDeg * Math.PI) / 180.0)\n\n    if (AXIS === 2) {\n        R[0][0] = c\n        R[0][1] = -s\n        R[1][0] = s\n        R[1][1] = c\n        R[2][2] = 1\n    } else if (AXIS === 0) {\n        R[0][0] = 1\n        R[1][1] = c\n        R[1][2] = -s\n        R[2][1] = s\n        R[2][2] = c\n    } else {\n        R[0][0] = c\n        R[0][2] = s\n        R[2][0] = -s\n        R[1][1] = 1\n        R[2][2] = c\n    }\n\n    return R\n}\n","import { getRotationAxis } from './rotateAxis'\nimport { vec } from './vectors'\n\nexport namespace mat {\n    /**\n     * @category Matrix\n     */\n    export type Matrix3 = [vec.Vector3, vec.Vector3, vec.Vector3]\n\n    /**\n     * Unpack a linearized matrix (components in a vector) and return\n     * a double array matrix\n     * @example\n     * ```ts\n     * // sym matrix3\n     * const m = [1, 2, 3,\n     *               4, 5,\n     *                  6]\n     * const n = unpack(m)\n     * // will give\n     * // [\n     * //   [1, 2, 3],\n     * //   [2, 4, 5],\n     * //   [3, 5, 6]\n     * // ]\n     * ```\n     */\n    export function unpack(m: vec.Vector6 | vec.Vector9): Matrix3 {\n        if (m.length === 6) {\n            return [\n                [m[0], m[1], m[2]],\n                [m[1], m[3], m[4]],\n                [m[2], m[4], m[5]],\n            ]\n        }\n        return [\n            [m[0], m[1], m[2]],\n            [m[3], m[4], m[5]],\n            [m[6], m[7], m[8]],\n        ]\n    }\n\n    /**\n     * Pack a a double array matrix, i.e. return\n     * components in a vector\n     * @see [[unpack]]\n     */\n    export function pack(m: Matrix3, isSym = true): vec.Vector6 | vec.Vector9 {\n        if (isSym) {\n            return [m[0][0], m[0][1], m[0][2], m[1][1], m[1][2], m[2][2]]\n        }\n        return [\n            m[0][0],\n            m[0][1],\n            m[0][2],\n            m[1][0],\n            m[1][1],\n            m[1][2],\n            m[2][0],\n            m[2][1],\n            m[2][2],\n        ]\n    }\n\n    /**\n     * @category Matrix\n     */\n    export function det(m: Matrix3) {\n        return (\n            m[0][0] * m[1][1] * m[2][2] -\n            m[0][0] * m[1][2] * m[2][1] -\n            m[0][1] * m[1][0] * m[2][2] +\n            m[0][1] * m[1][2] * m[2][0] +\n            m[0][2] * m[1][0] * m[2][1] -\n            m[0][2] * m[1][1] * m[2][0]\n        )\n    }\n\n    export function multMat(m1: Matrix3, m2: Matrix3): Matrix3 {\n        const t = [\n            [0, 0, 0],\n            [0, 0, 0],\n            [0, 0, 0],\n        ] as Matrix3\n        t[0][0] =\n            m1[0][0] * m2[0][0] + m1[0][1] * m2[1][0] + m1[0][2] * m2[2][0]\n        t[0][1] =\n            m1[0][0] * m2[0][1] + m1[0][1] * m2[1][1] + m1[0][2] * m2[2][1]\n        t[0][2] =\n            m1[0][0] * m2[0][2] + m1[0][1] * m2[1][2] + m1[0][2] * m2[2][2]\n        t[1][0] =\n            m1[1][0] * m2[0][0] + m1[1][1] * m2[1][0] + m1[1][2] * m2[2][0]\n        t[1][1] =\n            m1[1][0] * m2[0][1] + m1[1][1] * m2[1][1] + m1[1][2] * m2[2][1]\n        t[1][2] =\n            m1[1][0] * m2[0][2] + m1[1][1] * m2[1][2] + m1[1][2] * m2[2][2]\n        t[2][0] =\n            m1[2][0] * m2[0][0] + m1[2][1] * m2[1][0] + m1[2][2] * m2[2][0]\n        t[2][1] =\n            m1[2][0] * m2[0][1] + m1[2][1] * m2[1][1] + m1[2][2] * m2[2][1]\n        t[2][2] =\n            m1[2][0] * m2[0][2] + m1[2][1] * m2[1][2] + m1[2][2] * m2[2][2]\n        return t\n    }\n\n    export function multVec(e: Matrix3, v: vec.Vector3): vec.Vector3 {\n        const x = v[0],\n            y = v[1],\n            z = v[2]\n        return [\n            e[0][0] * x + e[0][1] * y + e[0][2] * z,\n            e[1][0] * x + e[1][1] * y + e[1][2] * z,\n            e[2][0] * x + e[2][1] * y + e[2][2] * z,\n        ]\n    }\n\n    export function multTVec(e: Matrix3, v: vec.Vector3): vec.Vector3 {\n        const x = v[0],\n            y = v[1],\n            z = v[2]\n        return [\n            e[0][0] * x + e[1][0] * y + e[2][0] * z,\n            e[0][1] * x + e[1][1] * y + e[2][1] * z,\n            e[0][2] * x + e[1][2] * y + e[2][2] * z,\n        ]\n    }\n\n    /**\n     * @category Matrix\n     */\n    export function inv(me: Matrix3, throwOnDegenerate: boolean) {\n        const n11 = me[0][0],\n            n21 = me[0][1],\n            n31 = me[0][2],\n            n12 = me[1][0],\n            n22 = me[1][1],\n            n32 = me[1][2],\n            n13 = me[2][0],\n            n23 = me[2][1],\n            n33 = me[2][2],\n            t11 = n33 * n22 - n32 * n23,\n            t12 = n32 * n13 - n33 * n12,\n            t13 = n23 * n12 - n22 * n13,\n            det = n11 * t11 + n21 * t12 + n31 * t13\n\n        if (det === 0) {\n            const msg =\n                \"Matrix3: .getInverse() can't invert matrix, determinant is 0\"\n            if (throwOnDegenerate === true) {\n                throw new Error(msg)\n            } else {\n                console.warn(msg)\n            }\n            return this.identity()\n        }\n\n        const detInv = 1 / det\n        return [\n            [\n                t11 * detInv,\n                (n31 * n23 - n33 * n21) * detInv,\n                (n32 * n21 - n31 * n22) * detInv,\n            ],\n            [\n                t12 * detInv,\n                (n33 * n11 - n31 * n13) * detInv,\n                (n31 * n12 - n32 * n11) * detInv,\n            ],\n            [\n                t13 * detInv,\n                (n21 * n13 - n23 * n11) * detInv,\n                (n22 * n11 - n21 * n12) * detInv,\n            ],\n        ]\n    }\n\n    /**\n     * @category Matrix\n     */\n    export function transpose(m: Matrix3) {\n        return [\n            [m[0][0], m[1][0], m[2][0]],\n            [m[0][1], m[1][1], m[2][1]],\n            [m[0][2], m[1][2], m[2][2]],\n        ] as Matrix3\n    }\n\n    export function transposeSelf(m: Matrix3) {\n        let tmp: number\n\n        tmp = m[0][1]\n        m[0][1] = m[1][0]\n        m[1][0] = tmp\n        tmp = m[0][2]\n        m[0][2] = m[2][0]\n        m[2][0] = tmp\n        tmp = m[1][2]\n        m[1][2] = m[2][1]\n        m[2][1] = tmp\n\n        return this\n    }\n\n    /**\n     * @brief Rotate CCW (angle in degrees) along the provided axis.\n     * @param m The matrix\n     * @param angleInDeg The angle of rotation\n     * @param AXIS The axis of rotation/ Can be either `x`, `X`, `y`, `Y`, `z`, or `Z`.\n     * @category Matrix\n     */\n    export function rotate(m: Matrix3, angleInDeg: number, AXIS: string) {\n        return rotateForward(m, getRotationAxis(AXIS, angleInDeg))\n    }\n\n    /**\n     * Rotate inverse a [[Matrix3]] according to a rotation matrix\n     * @param {Matrix3} R The rotation matrix (antisymmetric)\n     * @param {Matrix3} M The matrix3 to rotate\n     */\n    export function rotateInverse(M: Matrix3, R: Matrix3) {\n        const Rt = transpose(R)\n        return multMat(Rt, multMat(M, R))\n    }\n\n    /**\n     * Rotate forward a [[Matrix3]] according to a rotation matrix\n     * @param {Matrix3} R The rotation matrix (antisymmetric)\n     * @param {Matrix3} M The matrix3 to rotate\n     */\n    export function rotateForward(M: Matrix3, R: Matrix3) {\n        const Rt = transpose(R)\n        return multMat(R, multMat(M, Rt))\n    }\n\n    export function makeRotationX(theta: number) {\n        const c = Math.cos((theta * Math.PI) / 180),\n            s = Math.sin((theta * Math.PI) / 180)\n        return unpack([1, 0, 0, 0, c, -s, 0, s, c])\n    }\n\n    export function makeRotationY(theta: number) {\n        const c = Math.cos((theta * Math.PI) / 180),\n            s = Math.sin((theta * Math.PI) / 180)\n        return unpack([c, 0, s, 0, 1, 0, -s, 0, c])\n    }\n\n    export function makeRotationZ(theta: number) {\n        const c = Math.cos((theta * Math.PI) / 180),\n            s = Math.sin((theta * Math.PI) / 180)\n        return unpack([c, -s, 0, s, c, 0, 0, 0, 1])\n    }\n}\n","/**\n * A Mersenne Twister 19937 random number generator. It is proved that the period is 2^19937-1,\n * and 623-dimensional equidistribution property is assured.\n * @see https://en.wikipedia.org/wiki/Mersenne_Twister\n * @param ubound The upper bound if any (1 by default)\n * @param floor Floor the result if true (false by default)\n * @example\n * ```ts\n * const a = randomMT()           // between 0 and 1 as a float number\n * const a = randomMT(1000)       // between 0 and 1000 as a float number\n * const a = randomMT(1000, true) // between 0 and 1000 as an integer\n * ```\n */\nexport const randomMT = (ubound?: number, floor = false) => {\n    let rnd = extractNumber()\n\n    if (ubound != undefined) {\n        rnd *= ubound\n    }\n\n    // ~~ is a faster substitute for Math.floor()\n    return floor ? ~~rnd : rnd\n}\n\n// ---------------------------------------------\n// private\n// ---------------------------------------------\n\n// Create a length 624 array to store the state of the generator\nconst MT = []\nlet index = 0\nconst init = false\n\n// Initialize the generator from a seed\nfunction initializeGenerator(seed: number) {\n    MT[0] = seed\n    for (let i = 1; 624 > i; ++i) {\n        // loop over each other element\n        MT[i] = (0x6c078965 * (MT[i - 1] ^ (MT[i] >> 30)) + i) & 0xffffffff\n    }\n}\n\n// Extract a tempered pseudorandom number based on the index-th value,\n// calling generateNumbers() every 624 numbers\nfunction extractNumber() {\n    if (index == 0) {\n        if (!init) {\n            initializeGenerator(+new Date())\n        }\n        generateNumbers()\n    }\n\n    let y = MT[index]\n    y ^= y >> 11\n    y ^= (y << 7) & 0x9d2c5680\n    y ^= (y << 15) & 0xefc60000\n    y ^= y >> 18\n    index = (index + 1) % 624\n    return y / 0x80000000\n}\n\n// Generate an array of 624 untempered numbers\nfunction generateNumbers() {\n    for (let i = 0; 624 > i; ++i) {\n        const y = (MT[i] & 0x80000000) | (MT[(i + 1) % 624] & 0x7fffffff)\n        MT[i] = MT[(i + 397) % 624] ^ (y >> 1)\n        if (y % 2 == 1) {\n            MT[i] ^= 0x9908b0df\n        }\n    }\n}\n","import { DataFrame, forEach, Serie } from '@youwol/dataframe'\n\n/**\n * @param df The DataFrame supporting the data for which the we want ti apply this algorithm. This dataframe\n * must contains at least 2 series: `positions` and `name`, i.e., the following must hold:\n * ```js\n * df.series.positions // must exist\n * df.series[name]     // must exist\n * ```\n *\n * @param x The origin in x\n * @param y The origin in y\n * @param z The origin in z\n * @param lx The width of the moving window\n * @param ly The height of the moving window\n * @param Lx The width of the zone of interest\n * @param ly The height of the zone of interest\n * @param nx The number of points along the x axis\n * @param ny The number of points along the y axis\n * @param name The name of the attribute to create\n * @return An object contaning the following\n * ```ts\n * {\n *      nx       : number, // nb points along x\n *      ny       : number, // nb points along y\n *      positions: Serie,  // itemSize = 3\n *      solution : serie   // itemSize = 1\n * }\n * ```\n *\n * ```text\n *   Lx\n * --------------------------\n * |                        |\n * |                        |\n * |   lx                   | Ly\n * | -----                  |\n * | |   | ly               |\n * | -----                  |\n * o-------------------------\n * (x,y)\n * ```\n */\nexport function movingAverage(\n    df: DataFrame,\n    {\n        x = 0,\n        y = 0,\n        z = 0,\n        lx,\n        Lx,\n        ly,\n        Ly,\n        nx,\n        ny,\n        name,\n    }: {\n        x?: number\n        y?: number\n        z?: number\n        lx: number\n        ly: number\n        Lx: number\n        Ly: number\n        nx: number\n        ny: number\n        name: string\n    },\n) {\n    const dx = Lx / (nx - 1)\n    const dy = Ly / (ny - 1)\n\n    const p = df.series.positions // positions\n    const a = df.series[name] // attribute\n\n    if (p === undefined) {\n        throw new Error(`positions is undefined`)\n    }\n    if (a === undefined) {\n        throw new Error(`attribute named ${name} is undefined`)\n    }\n    // if (a.itemSize !== 1) throw new Error(`attribute named ${name} must have itemSize=1 (at least for now)`)\n\n    const bbox = new BBox(lx, ly)\n\n    const result = []\n    const positions = []\n\n    for (let i = 0; i < nx; ++i) {\n        bbox.x = x + i * dx\n        for (let j = 0; j < ny; ++j) {\n            bbox.y = y + j * dy\n            positions.push(bbox.x, bbox.y, z)\n            result.push(bbox.density(p, a))\n        }\n    }\n\n    return {\n        nx,\n        ny,\n        positions: Serie.create({ array: positions, itemSize: 3 }),\n        solution: Serie.create({ array: result, itemSize: a.itemSize }),\n    }\n}\n\n// ---------------------------------------------------------------------\n\nclass BBox {\n    public x = 0\n    public y = 0\n\n    constructor(private w: number, private h: number) {}\n\n    contains(p: [number, number, number]): boolean {\n        return (\n            p[0] >= this.x &&\n            p[1] >= this.y &&\n            p[0] <= this.x + this.w &&\n            p[1] <= this.y + this.h\n        )\n    }\n\n    density(serie: Serie, prop: Serie): number | number[] {\n        let n = 0\n\n        let a = undefined\n        if (prop.itemSize === 1) {\n            a = 0\n        } else {\n            a = new Array(prop.itemSize).fill(0)\n        }\n\n        forEach([serie, prop], ([s, p]) => {\n            if (this.contains(s)) {\n                n++\n                if (prop.itemSize === 1) {\n                    a += p as number\n                } else {\n                    for (let i = 0; i < prop.itemSize; ++i) {\n                        a[i] += p[i]\n                    }\n                }\n            }\n        })\n\n        if (prop.itemSize === 1) {\n            return n === 0 ? 0 : a / n\n        } else {\n            if (n === 0) {\n                return a\n            } else {\n                return a.map((v) => v / n)\n            }\n        }\n    }\n}\n","// -----------------------------------------------------------------------------\n// Inspired from https://blog.demofox.org/2017/08/05/generating-random-numbers-from-a-specific-distribution-by-inverting-the-cdf/\n// -----------------------------------------------------------------------------\n\nexport type DistributionFunction = (x: number) => number\n\n/**\n * Get an inverse CDF function of a PDF function using a lookup table\n */\nexport function inverseCDF(PDF: DistributionFunction, lutSize = 100) {\n    let lut: Array<number> = []\n\n    let value = 0\n    for (let i = 0; i < lutSize; ++i) {\n        value += PDF(i / (lutSize - 1))\n        lut.push(value)\n    }\n    lut = lut.map((v) => v / value) // Normalize the CDF\n\n    const d = 1 / lutSize\n    return (y: number) => {\n        if (y < lut[0]) {\n            return (y / lut[0]) * d\n        }\n        const i = lowerBound(lut, y)\n        return (i + (y - lut[i - 1]) / (lut[i] - lut[i - 1])) * d\n    }\n}\n\n// --------------------------------------------------------\n\n// Implement the std::lower_bound function\n//\nconst lowerBound = (A: Array<number>, T: number) => {\n    let i = 0,\n        j = A.length\n    while (i < j) {\n        const k = Math.floor((i + j) / 2)\n        if (A[k] < T) {\n            i = k + 1\n        } else {\n            j = k\n        }\n    }\n    return i\n}\n"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__595__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","eigenValue","s","Error","dim","dimension","itemSize","image","count","k","i","e","eigen","itemAt","j","array","values","eigenVector","vectors","forEach","v","add","series","length","clone","addNumber","serie","a","sub","others","_","mult","args","multMat","s1","s2","map","w","A","symSquaredMatrix","squaredMatrix","b","Vector","multVec","div","trace","norm","norm2","Math","sqrt","reduce","acc","transpose","id","item","square","Serie","create","abs","dot","isSerie","v1","v2","vector","cross","B","normalize","mM","minMax","m","l","unitInterval","negate","invert","weightedSum","data","alpha","sum","Array","fill","tagNaN","fn","Number","NaN","rand","min","max","delta","random","round","trunc","POSITIVE_INFINITY","M","NEGATIVE_INFINITY","equals","x","y","closeTo","eps","getNaN","isNaN","push","n","inv","throwOnDegenerate","isize","index","det","msg","console","warn","invdet","minv","me","n11","n12","n13","n21","n22","n23","n31","n32","n33","t11","t12","t13","detInv","rotate","rot","inverse","isArray","R","mat","rotateInverse","unpack","pack","rotateForward","translate","t","scale","shuffle","arr","randomIndex","currentIndex","floor","flatten","determinant","matrix","at","switchConvention","stress","normals","positions","indices","v3","vec","createTyped","Float32Array","areas","ns","barycenters","mean","covariance","N","xb","yb","variance","weightedMean","W","quantile","q","sorted","sort","pos","base","rest","q25","q50","q75","IQR","outliers","mustache","__ouliers__","cut","isOutliers","check","notOutliers","Q25","Q75","iqr","std","mu","diffArr","describe","bins","size","nb","start","stop","ComponentDecomposer","names","df","name","sname","nameOfSerie","vector2Names","smatrix2Names","matrix2Names","vector3Names","smatrix3Names","matrix3Names","newName","substring","apply","PositionDecomposer","constructor","names_","EigenValuesDecomposer","parseInt","charAt","EigenVectorsDecomposer","VectorNormDecomposer","NormalsDecomposer","_serie","_name","exists","ValenceDecomposer","ids","Int8Array","AreaDecomposer","Fringes","fringes","u","val","EPS","MAX_ITER","xcpi","cos","PI","xspi","sin","nb_iter","thr_nn","jj","ik","im","iq","il","a_ij","a_im","a_il","v_ilv","v_imv","sinx","cosx","nn","ij","a_norm","a_normEPS","thr","lq","mq","lm","a_lm","a_lm_2","ll","mm","a_ll","a_mm","atan","sinx_2","cosx_2","sincos","ilv","imv","Eigen","eigenValues","eigenVectors","compute","assert","dot2","cur","dot3","from2","from3","barycentric2","p","c","v0","d00","d01","d11","d20","d21","denom","barycentric3","Vector2","barycentric4","p0","p1","p2","p3","trans","Vector3","P","det0","determinant4x4","minArray","maxArray","minMaxArray","normalizeArray","scaleArray","dectectNan","filter","lerp","x1","x2","q00","q01","biLerp","q11","q12","q21","q22","r1","r2","triLerp","q000","q001","q010","q011","q100","q101","q110","q111","x00","x10","x01","x11","r0","triangleLerp2D","q1","q2","q3","uvw","qq2","qq3","triangleLerp3D","tetraLerp","p4","q4","qq4","InterpolateDirection","meshInterpolate","attribute","topology","direction","INCREASING","topo","from","getMinMax","slice","to","combel","num","idx","interpolateIncreasingCombels","DECREASING","nbr","idNodes","idFace","vv","too","interpolateDecreasingCombels","Infinity","MinMax","m_","reset","setCoord","set","setRow","Quaternion","fromAxisAngle","axis","angle","setAxisAngle","fromProd","fromBase","X","Y","Z","setFromBase","fromRotationMatrix","setFromRotationMatrix","fromTo","setFromTo","res","sinus","acos","notEquals","prod","setFrom","iRotate","q02","q03","q13","q23","toMatrix","q0","nor","sha","epsilon","fromSqNorm","toSqNorm","axisSqNorm","test","asin","normX","normY","normZ","rotateAxis","getRotationAxis","angleInDeg","AXIS","m1","m2","isSym","z","multTVec","identity","transposeSelf","tmp","makeRotationX","theta","makeRotationY","makeRotationZ","randomMT","ubound","rnd","init","seed","MT","initializeGenerator","Date","generateNumbers","extractNumber","movingAverage","lx","Lx","ly","Ly","nx","ny","dx","dy","bbox","BBox","result","density","solution","h","contains","inverseCDF","PDF","lutSize","lut","lowerBound","T"],"sourceRoot":""}