export * from './lib';
export declare type Entry = {
    encode: Function;
    decode: Function;
    vendor?: string;
    name?: string;
};
/**
 * Usage for getting an encoder/decoder
 * ```js
 * const filename = 'myFile.obj'
 * const filter = IOFactory.getFilter(filename)
 * if (filter) {
 *      // buffer is the content of the file
 *      filter.decode(buffer, {shared: true})
 * }
 * ```
 *
 * Usage for registering a new filter
 * ```js
 * // Register a decoder/encoder for the extension abc,
 * // where myEncoder and myDecoder are your 2 functions
 * IOFactory.registerFilter('abc', {encoder: myEncoder, decoder: myDecoder})
 * ```
 */
export declare const IOFactory: {
    registerFilter(extension: string, entry: Entry): void;
    getFilter: (filename: string) => Entry;
};
